# (SPOT)id and (SPOT)light data specification
# all field contents will need to be converted to lowercase before processing
# Notes are recorded as block using '|' so line breaks are preserved when printing
# Textblocks should be mark down formatted
# Rough alphabetical order but this can be fixed with a bit of python code later
-
  fname: abx1date
  sqltype: date
  varlab: Date of first (hospital) dose broad or appropriate spectrum antibiotic
  talias: {idpatient: dateabx1}
-
  fname: abx1time
  sqltype: time
  varlab: Time of first (hospital) dose broad or appropriate spectrum antibiotic
  talias: {idpatient: timeabxb1}
-
  fname: abx_prev
  sqltype: tinyint
  sqllen: 3
  varlab: Pre-admission antibiotics
  talias: {idpatient: abxprev, id_dvr_wide: abxprev}
  # convert to common value regardless of entry
  valias: &value_yesno {'n': 0, 'y': 1, 'yes': 1, 'no': 0, '1': 1, '0': 0}
  # appropriately label that common value
  vallab: &label_truefalse {0: 'False', 1: 'True'}
  checks:
    -
      type: legal_vals
      value: [0, 1]
      msg: Illegal response
      response: drop_field
-
  fname: v_abx
  sqltype: tinyint
  sqllen: 1
  varlab: Visit antibiotic management
  tablerowlabel:
    latex: Antimicrobial therapy
  talias: {headsfinal: abx}
  valias:
    A: 1
    B: 5
    C: 2
    D: 3
    E: 0
  vallab:
    1: Prescribed - not administered
    5: Prescibed - administered
    2: Newly Prescribed
    3: Modified prescription
    0: Not prescribed
  definition: |
    - appropriate or broad spectrum antibiotics currently prescribed but not administered prior to visit
    - appropriate or broad spectrum antibiotics currently prescribed and administered prior to visit
    - New prescription of appropriate or broad spectrum antibiotics by end of visit (i.e. on departure)
    - Modified prescription of appropriate or broad spectrum antibiotics by end of visit (usually to extend spectrum)
    - appropriate or broad spectrum antibiotics not prescribed
    - appropriate antibiotics are defined as antibiotic(s) proven to be effective against a microbe identified as being responsible for this episode of illness
    - broad spectrum antibiotics include, but are not limited to:
        - Amoxicillin/Ampicillin/Co-amoxiclav
        - Piperacillin/Ticarcillin
        - Clindamycin
        - cephalosporins (second, third and fourth generation)
        - carbapenems
        - tetracyclines
        - Other  (please check whether broad spectrum according to local use/guidance and please state)
  source: spotlight
-
  fname: admx_code
  sqltype: char
  sqllen: 16
  varlab: Reason for admission to hospital (code)
  talias: {idpatient: rahospcode}
  notes: |
    primary reason for hospital admission - when the reason for hospital admission is not pneumonia please indicate the primary reason for hospital admission using the ICNARC coding method
    the primary reason for admission to your hospital as assessed and recorded at admission to and during the first 24 hours in the hospital
    the primary reason for admission to your hospital is deemed to be the most important underlying condition or reason for admission to your hospital and should describe what is happening, or could possibly happen, to this admission that precluded management in the community
    if the admission to your hospital will have surgery for the condition you are coding, then a surgical code is selected, if not, then a non-surgical code is selected
    there is no point describing a syndrome that is characterised by a series of physiological changes as this will be apparent, so septic shock, septicaemia etc. are characterised by a series of physiological changes and should be secondary to an underlying condition coded as primary
    codes are generated by the ICNARC Coding Method (see https://www.icnarc.org/ICMBuilder.aspx)
    where the condition required to be coded is not available, code the condition as far as you can and then enter the name of the condition in the text field
-
  fname: admx_lrti
  sqltype: tinyint
  varlab: Pneumonia as reason for hospital admission
  talias: {idpatient: rahosppn, id_dvr_wide: pneucomm}
  # introduce the probability scale label here
  vallab: &label_prob {1: 'None', 2: 'Possible', 3: 'Probable', 4: 'Definite'}
-
  fname: admx_other
  sqltype: char
  sqllen: 255
  varlab: Reason for admission to hospital (text)
  talias: {idpatient:   rahosp}
-
  fname: adno
  sqltype: int
  varlab: CMP admission number
  checks:
    -
      type: regex
      value: &regex_cmp '((?i)\b((201[0-3](\d{4})\b)))'
      msg: Invalid format for CMP number
      response: drop_field
    -
      type: min
      value: 20100001
      msg: Below minimum value
      response: drop_field
    -
      type: max
      value: 20129999
      msg: Above maximum value
      response: drop_field
  definition: |
    - unique number assigned to each admission to a unit participating in the Case Mix Programme (CMP)
    - value is usually automatically generated by CMP software application as each critical care unit admission record is created on CMP data entry
    - since the CMP admission number will not be available until the critical care admission record is created on CMP data entry, it will need to be recorded retrospectively
  source: spotlight
-
  fname: adno_provided
  sqltype: int
  varlab: CMP admission number provided by site
  talias: {idpid: cmpno, headsfinal: cmpadno}
  checks:
    -
      type: regex
      value: *regex_cmp
      msg: Invalid format for CMP number
      response: drop_field
    -
      type: min
      value: 20100001
      msg: Below minimum value
      response: drop_field
    -
      type: max
      value: 20129999
      msg: Above maximum value
      response: drop_field
-
  fname: age_est
  sqltype: tinyint
  varlab: Estimated age in years (at first visit)
  talias: {idlight: age}
  checks:
    -
      type: min
      value: 18
      msg: Below minimum value
      response: drop_record # i.e. drop the entire record not just the field
    -
      type: max
      value: 120
      msg: Above maximum value
      response: drop_field # set field to NULL or missing
-
  fname: avpu
  sqltype: tinyint
  varlab: AVPU score - modified
  talias:
    headsfinal: avpu
    idvisit: avpu
  valias:
    A: 0
    V: 2
    P: 3
    U: 4
    C: 1
    N: 5
  vallab:
    0: Alert - not confused
    2: Verbal response
    3: Response to pain
    4: Unresponsive
    1: Alert - new confusion
    5: Not available
  checks:
    -
      type: legal_vals
      value: ['A', 'V', 'P', 'U', 'C', 'N']
      msg: Illegal value
      response: drop_field
  definition: |
    - neurological status measured and recorded on visit arrival (and prior to any therapeutic intervention provided by the visiting team (critical care outreach service (or equivalent) or critical care unit nursing/medical (non-outreach) staff)) using a modified AVPU and the Glasgow Coma Score
    - AVPU should be assessed when the patient is free from the effects of clinically administered sedative and/or paralysing or neuromuscular blocking agents (patients with altered consciousness due to self-sedation through deliberate or accidental overdose/poisoning should be assessed and scored as seen)
    - for patients not free from the effects of clinically administered sedative and/or paralysing or neuromuscular blocking agents, record the pre-sedation neurological status and indicate that this has been done in the relevant field
    - AVPU (with modified Alert) options:
          - Alert (not confused): a fully awake (and orientated) patient. This patient will have spontaneously open eyes, and will respond to voice. Dementia which may also result in loss of orientation in time, place, or person, or disorganised thinking, is chronic and these patients should be classed in this option unless there is clear evidence of an acute deterioration in their mental status.
          - Alert - new confusion - a fully awake (but confused) patient - this patient will have spontaneously open eyes, will respond to voice (but is acutely confused)
          - Verbal response - the patient makes some kind of response when you talk to them, which could be in any of the three component measures of eye, motor or verbal e.g. patient's eyes open on being asked 'Are you okay?' or response could be as little as a slight move of a limb or a grunt, moan when prompted by voice
          - Pain response - the patient makes a response on any of the three component measures of eye, motor or verbal when pain stimulus is used. Recognised pain stimuli include: a sternal rub; pinching the patient's ear; and pressing a pen (or similar instrument) in to the bed of the patient's fingernail.  The person assessing should always exercise care and be suitably trained when performing pain stimulus as a method of assessing levels of consciousness.
          - Unresponsive - sometimes referred to as *unconscious* - the patient has no eye, motor or verbal response to voice or pain.
  source: spotlight
-
  fname: bili
  sqltype: smallint
  varlab: Bilirubin
  unitlabel:
    latex: "\\textgreek{m}mol l\\textsuperscript{-1}"
  units: micromol / l
  talias: {idlab: hbilir, headsfinal: hbilir}
  checks:
    -
      type: min
      value: 0
      msg: Above minimum value
      response: drop_field
    -
      type: max
      value: 1000
      msg: Above maximum value
      response: drop_field
  definition: |
    - last bilirubin measured and recorded either on, or within 24 hours preceding, visit arrival
    - from the 24 hours prior to arrival includes measured and recorded at visit start provided this is prior to any intervention by the visiting team
    - laboratory results only, i.e. the results of tests performed either in the Departments of Clinical Chemistry or Haematology etc. or in near-patient testing/point-of-care testing laboratories with formal quality control programmes in operation
  source: spotlight
-
  fname: bpdia
  sqltype: smallint
  varlab: Diastolic blood pressure
  unitlabel:
    latex: mmHg
  units: mmHg
  talias: {}
  checks:
    -
      type: min
      value: 0
      msg: Below minimum value
      response: drop_field
    -
      type: max
      value: 150
      msg: Above maximum value
      response: drop_field
-
  fname: bpsys
  sqltype: smallint
  varlab: Systolic blood pressure
  units: mmHg
  unitlabel:
    latex: mmHg
  talias: {}
  checks:
    -
      type: min
      value: 20
      msg: Below minimum value
      response: drop_field
    -
      type: max
      value: 300
      msg: Above maximum value
      response: drop_field
  definition: |
    - systolic and paired diastolic blood pressure, measured and recorded on visit arrival and prior to any therapeutic intervention provided by the visiting team(critical care outreach service (or equivalent) or critical care unit nursing/medical (non-outreach) staff)
    - measurements performed immediately prior to visit arrival may be recorded if the value would be used as part of the clinical assessment at that time
    - blood pressure values are included irrespective of measurement method used
    - blood pressure values measured during a period of iatrogenic disturbance e.g. physiotherapy, turning, periods of crying, etc. should not be recorded
    - where blood pressure values are undetectable, the value zero should be recorded
  source: spotlight
-
  fname: cortisol
  sqltype: smallint
  varlab: Serum cortisol
  units: nmol / l
  talias: {}
-
  fname: creat_base
  sqltype: smallint
  varlab: Baseline creatinine
  units: micromol / l
  talias: {idpatient: bcreat, id_dvr_wide: bcreat}
  notes: |
    baseline creatinine is the lowest value recorded during the 12 months prior to the date of the index chest x-ray
  checks:
  -
    type: min
    value: 0
    msg: Below minimum value
    response: drop_field
  -
    type: max
    value: 5000
    msg: Above maximum value
    response: drop_field
-
  fname: creatinine
  sqltype: smallint
  varlab: Serum creatinine
  units: micromol / l
  unitlabel:
    latex: "\\textgreek{m}mol l\\textsuperscript{-1}"
  talias: {idlab: hcreat, headsfinal: hcreat}
  checks:
  -
    type: min
    value: 0
    msg: Below minimum value
    response: drop_field
  -
    type: max
    value: 5000
    msg: Above maximum value
    response: drop_field
  definition: |
    - last creatinine measured and recorded either on, or within 24 hours preceding, visit arrival
    - from the 24 hours prior to arrival includes measured and recorded at visit start provided this is prior to any intervention by the visiting team
    - laboratory results only, i.e. the results of tests performed either in the Departments of Clinical Chemistry or Haematology etc. or in near-patient testing/point-of-care testing laboratories with formal quality control programmes in operation - includes blood gas analyser
  source: spotlight
-
  fname: cxr_dt
  sqltype: date
  varlab: Date of index CXR
  talias: {idpid: cxrdt, id_dvr_long: dcxr, id_dvr_wide: dcxr}
  notes: |
    date of the first chest radiograph (x-ray) in hospital where there was a clinical suspicion of infection
    chest radiographs performed purely to investigate other diagnoses (e.g. pneumothorax) or for procedural reasons (naso-gastric tube placement) do not qualify
    this date will be day 0 (zero) of the study
    the day following will be study day +1 (Day plus one)
    the day preceding will be study day -1 (Day minus one)
-
  fname: cxreff
  sqltype: tinyint
  varlab: Pleural effusion on CXR
  talias: {idpid: cxreffusion}
  valias: &alias_prob {'n':1, 's':2, 'r':3, 'd':4} # None, poSsible, pRobable, Definite
  vallab: *label_prob # re-using probability label
  checks:
    -
      type: legal_vals
      value: [1,2,3,4]
      msg: Illegal response
      response: drop_field
-
  fname: cxrlrti
  sqltype: tinyint
  varlab: CXR infiltrates due to pneumonia
  talias: {idpid: cxrother}
  valias: *alias_prob # re-using probability alias (from web portal)
  vallab: *label_prob # re-using probability label
  checks:
    -
      type: legal_vals
      value: [1,2,3,4]
      msg: Illegal response
      response: drop_field
-
  fname: cxrnew
  sqltype: tinyint
  varlab: New infiltrates on CXR
  talias: {}
  valias: *alias_prob # re-using probability alias (from web portal)
  vallab: *label_prob # re-using probability label
  checks:
    -
      type: legal_vals
      value: [1,2,3,4]
      msg: Illegal response
      response: drop_field
-
  fname: cxrquad
  sqltype: tinyint
  varlab: Number of quadrants with infiltrates
  talias: {idpid: cxrquadnum}
  checks:
    -
      type: min
      value: 0
      msg: Below minimum range
      response: drop_field
    -
      type: max
      value: 4
      msg: Above maximum range
      response: drop_field
-
  fname: delirium
  sqltype: tinyint
  varlab: Delirium
  talias: {idvisit: confusion}
  # convert to common value regardless of entry
  valias: *value_yesno
  # appropriately label that common value
  vallab: *label_truefalse
  checks:
    -
      type: legal_vals
      value: [0, 1]
      msg: Illegal response
      response: drop_field
-
  fname: disable_admx
  sqltype: tinyint
  varlab: Disabled flag - admission or visit
  talias: {idpid: admissionrecorddisabled, headsfinal: disabled}
  vallab: *label_truefalse
  checks:
    -
      type: legal_vals
      value: [0,1]
      msg: Illegeal response
      response: drop_field
-
  fname: disable_pt
  sqltype: tinyint
  varlab: Disabled flag - (SPOT)id patient
  talias: {idpid: patientrecorddisabled}
  vallab: *label_truefalse
  checks:
    -
      type: legal_vals
      value: [0,1]
      msg: Illegal response
      response: drop_field
-
  fname: dob
  sqltype: date
  varlab: Date of Birth
  talias: {idpid: dob, lightPID: dob}
  checks:
    -
      type: min
      value: 1890-01-01
      msg: Below minimum value
      response: drop_field
    -
      type: max
      value: 1994-12-31
      msg: Above maximum value
      response: drop_field
  definition: |
    - date of birth of patient
    - if date of birth is unobtainable, then use judgement to estimate year of birth and record as 1 January of estimated year of birth
  source: spotlight
-
  fname: fio2
  sqltype: smallint
  varlab: Inspired oxygen value
  talias: {idvisit: fio2, headsfinal: fio2}
  notes: |
    inspired oxygen measured and recorded at the time of the recorded PaO2 when available or oxygen saturation (when PaO2 not available)
    inspired oxygen units are recorded either as % (room air, Venturi, CPAP, NIV or IPPV) or litres min-1 (wall, reservoir bag and NIV)
  checks:
    -
      type: min
      value: 1
      msg: Below minimum value
      response: drop_field
    -
      type: max
      value: 150
      msg: Above maximum value
      response: drop_field
-
  fname: fio2u
  sqltype: char
  varlab: Inspired oxygen units
  talias:
    idvisit: fio2units
    headsfinal: fio2unit
  valiases:
    -
      valias_tables: [headsfinal, headsvisit]
      valias: {A: p, B: l}
    -
      valias_tables: [idvisit]
      valias: {P: p, L: l}
  vallab:
    p: percent
    l: litres per min
  checks:
  -
    type: legal_vals
    value: [A,B,P,L]
    msg: Illegal response
    response: drop_field
-
  fname: flag_age_est
  sqltype: tinyint
  varlab: Age is estimated
  talias: {idpid: age_est, lightPID: dobest}
  vallab: *label_truefalse
-
  fname: fluidin
  sqltype: smallint
  varlab: 24 hour fluid intake
  units: mls
  notes: |
    total fluid intake (intravenous and oral) for the calendar day
    crystalloids (e.g. Normal saline etc), colloids (e.g. gelofusin etc), and blood products should all be included
    if the observation period is less than 24 hours then record this data as not available
  checks:
  #  more nuanced check in dictionary_checks
  # -
  #   type: min
  #   value: 250
  #   msg: Below minimum value
  #   response: drop_field
  -
    type: max
    value: 24000
    msg: Above maximum value
    response: drop_field
-
  fname: ft3
  sqltype: float
  varlab: Free T3
  units: picomol / l
  talias: {}
  checks:
    -
      type: min
      value: 0
      msg: Below minimum value
      response: drop_field
    -
      type: max
      value: 100
      msg: Above maximum value
      response: drop_field
-
  fname: ft4
  sqltype: float
  varlab: Free T4
  units: picomol / l
  talias: {}
  checks:
    -
      type: min
      value: 0
      msg: Below minimum value
      response: drop_field
    -
      type: max
      value: 100
      msg: Above maximum value
      response: drop_field
-
  fname: fupend_date
  sqltype: date
  varlab: Last daily follow-up
  talias: {idpid: lfudate, id_dvr_long: dlast, id_dvr_wide: dlast}
  checks:
    -
      type: min
      value: 2011-07-01
      msg: Below minimum value
      response: drop_field
    -
      type: max
      value: 2012-10-31
      msg: Above maximum value
      response: drop_field
-
  fname: fupend_why
  sqltype: char
  varlab: Reason daily follow-up ended
  talias: {idpid: obsend, id_dvr_wide: stend}
  vallab:
    X: CXR report not consistent with pneumonia
    W: Working diagnosis not consistent with pneumonia
    C: Follow-up period complete
    A: Discharged alive
    T: Transferred to another hospital
    D: Died
    O: Other (see notes)
  checks:
  -
    type: legal_vals
    value: [X,W,C,A,T,D,O]
    msg: Illegal response
    response: drop_field
-
  fname: gcs_presed
  sqltype: tinyint
  varlab: Reported GCS measured pre-sedation
  talias: {headsfinal: pneurs}
  vallab: *label_truefalse
-
  fname: gcse
  sqltype: tinyint
  varlab: GCS Eye response
  talias: {}
  checks:
    -
      type: min
      value: 1
      msg: Below minimum value
      response: drop_field
    -
      type: max
      value: 4
      msg: Above maximum value
      response: drop_field
-
  fname: gcsv
  sqltype: tinyint
  varlab: GCS Verbal response
  talias: {}
  checks:
    -
      type: min
      value: 1
      msg: Below minimum value
      response: drop_field
    -
      type: max
      value: 5
      msg: Above maximum value
      response: drop_field
-
  fname: gcsm
  sqltype: tinyint
  varlab: GCS motor response
  talias: {}
  checks:
    -
      type: min
      value: 1
      msg: Below minimum value
      response: drop_field
    -
      type: max
      value: 6
      msg: Above maximum value
      response: drop_field
-
  fname: gcst
  sqltype: tinyint
  varlab: Glasgow Coma Score
  talias: {}
  checks:
    -
      type: min
      value: 3
      msg: Below minimum value
      response: drop_field
    -
      type: max
      value: 15
      msg: Above maximum value
      response: drop_field
  definition: |
    - neurological status measured and recorded on visit arrival (and prior to any therapeutic intervention provided by the visiting team (critical care outreach service (or equivalent) or critical care unit nursing/medical (non-outreach) staff)) using a modified AVPU and the Glasgow Coma Score
    - Glasgow Coma Score should be assessed when the patient is free from the effects of clinically administered sedative and/or paralysing or neuromuscular blocking agents (patients with altered consciousness due to self-sedation through deliberate or accidental overdose/poisoning should be assessed and scored as seen)
    - for patients not free from the effects of clinically administered sedative and/or paralysing or neuromuscular blocking agents, record the pre-sedation neurological status and indicate that this has been done in the relevant field
  source: spotlight
-
  fname: hadmit_date
  sqltype: date
  varlab: Date of admission to hospital
  talias: {idpid: admissiondt, idpatient: hadate, id_dvr_long: dah, id_dvr_wide: dah, tailsmini: dah}
  checks:
    -
      type: min
      value: 2010-09-01
      msg: Below minimum value
      response: drop_field
    -
      type: max
      value: 2013-12-31
      msg: Above maximum value
      response: drop_field
-
  fname: hadmit_date_crf
  sqltype: date
  varlab: Date of admission to hospital
-
  fname: hadmit_time
  sqltype: time
  varlab: Time of admission to hospital
  talias: {idpid: hatime, idpatient: hatime, tailsmini: dah}
-
  fname: hco3
  sqltype: float
  varlab: Serum bicarbonate
  tablerowlabel:
    latex: "HCO\\textsubscript{3}\\textsuperscript{-1}"
  unitlabel:
    latex: "mmol l\\textsuperscript{-1}"
  stataformat: "%9.1f"
  units: mmol / l
  talias: {headsfinal: abghco3}
  checks:
    -
      type: min
      value: 0
      msg: Below minimum value
      response: drop_field
    -
      type: max
      value: 60
      msg: Above maximum value
      response: drop_field
  definition: |
    - HCO~3~^-1^ from most recent arterial blood gas within prior hour
  source: spotlight
-
  fname: hdc_date
  sqltype: date
  varlab: Date of discharge from hospital
  talias: {idpid: hddate, id_dvr_long: ddh, id_dvr_wide: ddh}
  checks:
    -
      type: min
      value: 2011-01-01
      msg: Below minimum value
      response: drop_field
    -
      type: max
      value: 2013-10-31
      msg: Above maximum value
      response: drop_field
-
  fname: hdc_res
  sqltype: char
  varlab: Residence post-discharge from hospital
  talias: {idpid: postres, id_dvr_wide: locap}
  vallab:
    H: Home
    T: Hospital-at-home
    A: Other acute hospital
    U: Nursing home or similar
    S: Short-term rehabilitation
    L: Long-term rehabilitation
    I: Other health related institution
    R: Residential place of work / education
    P: Hospice or equivalent
    F: No fixed address / temporary abode
    D: Died
  checks:
  -
    type: legal_vals
    value: [H,T,A,U,S,L,I,R,P,F,D]
    msg: Illegal value
    response: drop_field
-
  fname: hrate
  sqltype: smallint
  varlab: Heart rate
  units: beats / min
  tablerowlabel:
    latex: "Heart rate"
  unitlabel:
    latex: "min\\textsuperscript{-1}"
  talias: {headsfinal: hrate, idvisit: hrate}
  checks:
    -
      type: min
      value: 0
      msg: Below minimum value
      response: drop_field
    -
      type: max
      value: 300
      msg: Above maximum value
      response: drop_field
  definition: |
    - heart (ventricular) rate measured and recorded on visit arrivaland prior to any therapeutic intervention provided by the visiting team (critical care outreach service (or equivalent) or critical care unit nursing/medical (non-outreach) staff)
    - measurements performed immediately prior to visit arrival may be recorded if the value would be used as part of the clinical assessment at that time
    - heart rate values measured during a period of iatrogenic disturbance e.g. physiotherapy, turning, periods of crying, etc. should not be recorded
  source: spotlight
-
  fname: hsinus
  sqltype: tinyint
  varlab: Sinus rhythm
  talias:
    idvisit: hrhyt
    visits: hryhth
    id_dvr_long: hrhyth
    headsfinal: hrhyt
  valias: {0: 1, 1: 0, s: 1, o: 0} # (SPOT)light tick if non-sinus hence 0->1 and 1 -> 0
  vallab: {1: Sinus, 0: Non-sinus}
  checks:
  -
    type: legal_vals
    value: [0,1,S,O]
    msg: Illegal response
    response: drop_field
  definition: |
    - heart rhythm recorded at the time the heart (ventricular) rate was measured and recorded on visit arrival
    - sinus rhythm is defined as the ventricular rhythm generated by the sino-atrial node
    - record sinus bradycardia, sinus tachycardia and sinus arrhythmia as sinus
    - heart rhythm may be diagnosed following clinical assessment (i.e. confirmation via an ECG is not required)
  source: spotlight
-
  fname: icode
  sqltype: char
  sqllen: 3
  varlab: (SPOT)light site code
  talias: {headspatient: icode}
-
  fname: spotidno
  sqltype: smallint
  varlab: study number - (SPOT)id
  talias:
    idpid: studynumber
    idpatient: spotidno
    idvisit: spotidno
    idlab: spotidno
    idlabuclh: spotidno
    idnotesp: spotidno
    idnotesl: spotidno
    idnotesu: spotidno
    idlongDVR_respCurr: id
    mortality_uclh: spotidnno
-
  fname: idpatient
  sqltype: char
  sqllen: 128
  varlab: unique patient ID - spotlight webportal
-
  fname: idvisit
  sqltype: char
  sqllen: 128
  varlab: unique visit ID - spotlight webportal
-
  fname: idmrn
  sqltype: char
  sqllen: 32
  varlab: Hospital patient ID
  talias: {idpid: hosno, lightPID: hosno}
  # checks:
  # -
  #   type: regex
  #   value: '\b((?i)([a-z]+?[\d\/]+?\w*)|(\d+?[a-z]+?\w*))|(\d{5,})\b'
  #   msg: Invalid format for medical record / hospital number
  #   response: drop_field
  definition: |
    - number assigned by your hospital to patient
    - otherwise known as the Medical Record Number
  source: spotlight
-
  fname: idnhs
  sqltype: char
  sqllen: 10
  varlab: NHS number
  talias: {idpid: nhsno, lightPID: nhsno}
  checks:
  -
    type: regex
    value: '\b\d{10}\b'
    msg: Invalid format for NHS number
    response: drop_field
  definition: |
    - Unique number assigned by the NHS as a numeric ten digit code to each NHS patient
  source: spotlight
-
  fname: idpcode
  sqltype: char
  sqllen: 16
  varlab: Patient postcode
  talias: {idpid: postcode, lightPID: pcode}
  checks:
  -
      type: regex
      value: '^(((([A-PR-UWYZ]([0-9]([A-HJKSTUW]|[0-9])?|[A-HK-Y][0-9]([ABEHMNPRVWXY]|[0-9])?)) *([0-9][ABD-HJLNP-UW-Z]{2})?))|UNKNOWN|Unknown|unknown)$'
      msg: Invalid format for postcode
      response: drop_field
  definition: |
    - normal residential postcode for this admission to your unit
    - for visitors to area, use normal residential postcode for admission's permanent place of residence
    - if admission is not a resident of the United Kingdom and Ireland, use list of standard country codes
    - a list of standard country codes can be found at www.icnarc.org
    - if postcode is unobtainable, record UNKNOWN
    - if outcode (first half of postcode) is obtainable, record this
  source: spotlight
-
  fname: immair
  sqltype: tinyint
  varlab: Pneumonia risk factor - upper airway compromise
  talias: {idpatient: pmhairw}
  valias: *value_yesno
  vallab: *label_truefalse
  checks:
  -
    type: legal_vals
    value: [0, 1, Y, N, y, n]
    msg: Illegal response
    response: drop_field
-
  fname: immetoh
  sqltype: tinyint
  varlab: Pneumonia risk factor - alcohol abuse
  talias: {idpatient: pmhetoh}
  valias: *value_yesno
  vallab: *label_truefalse
  checks:
  -
    type: legal_vals
    value: [0, 1, Y, N, y, n]
    msg: Illegal response
    response: drop_field
-
  fname: immiv
  sqltype: tinyint
  varlab: Pneumonia risk factor - intravenous drug abuse
  talias: {idpatient: pmhivdu}
  valias: *value_yesno
  vallab: *label_truefalse
  checks:
  -
    type: legal_vals
    value: [0, 1, Y, N, y, n]
    msg: Illegal response
    response: drop_field
-
  fname: immrx
  sqltype: tinyint
  varlab: Pneumonia risk factor - immunosuppressive drugs
  talias: {idpatient: immunosuprx}
  valias: *value_yesno
  vallab: *label_truefalse
  checks:
  -
    type: legal_vals
    value: [0, 1, Y, N, y, n]
    msg: Illegal response
    response: drop_field
-
  fname: initials_crf
  sqltype: char
  sqllen: 4
  varlab: Patient initials
-
  fname: initials
  sqltype: char
  sqllen: 4
  varlab: Patient initials
  talias:
    idpid: initials
    idpatient: patientid
    idvisit: patientid
    idlab: patientid
    idlabuclh: patientid
    idnotesp: patientid
    idnotesl: patientid
    idnotesu: patientid
-
  fname: lactate
  sqltype: float
  varlab: Lactate
  units: mmol / l
  unitlabel:
    latex: "mmol l\\textsuperscript{-1}"
  stataformat: "%9.1f"
  talias: {idvisit: habl, headsfinal: habl}
  checks:
    -
      type: min
      value: 0
      msg: Below minimum value
      response: drop_field
    -
      type: max
      value: 50
      msg: Above maximum value
      response: drop_field
  definition: |
    - Lactate from most recent arterial blood gas within prior hour
  source: spotlight
-
  fname: lymph
  sqltype: float
  varlab: lymphocyte count
  units: cells x10e9 / l
  talias: {idlab: lyc}
  checks:
    -
      type: min
      value: 0
      msg: Below minimum value
      response: drop_field
    -
      type: max
      value: 100
      msg: Above maximum value
      response: drop_field
-
  fname: mevent
  sqltype: char
  varlab: Major event code
  talias: {idvisit: majorevents}
  vallab:
    N: None
    C: Cardiac arrest
    R: Respiratory arrest
    O: Other
  checks:
  -
    type: legal_vals
    value: [N,C,R,O]
    msg: Illegal response
    response: drop_field
-
  fname: meventcode
  sqltype: char
  varlab: ICNARC diagnostic code for major event
  talias: {idvisit: majoreventcode}
  # TODO: 2012-07-23 - write a regex for ICNARC diagnostic codes
-
  fname: meventtxt
  sqltype: char
  sqllen: 255
  varlab: Major event free text
  talias: {idvisit: majoreventstxt}
-
  fname: namef
  sqltype: char
  sqllen: 64
  varlab: First name
  talias: {idpid: firstname, lightPID: fname}
  definition: |
    - first name of patient
  # CHANGED: 2012-08-17 - bug with decryption of names so cannot run check
  # checks:
  # -
  #   type: regex
  #   value: "[-A-Za-z']{2,}"
  #   msg: Invalid format for first name
  #   response: drop_field
  source: spotlight
-
  fname: namel
  sqltype: char
  sqllen: 64
  varlab: Last name
  talias: {idpid: lastname, lightPID: lname}
  definition: |
    - last name of patient
  # CHANGED: 2012-08-17 - bug with decryption of names so cannot run check
  # checks:
  # -
  #   type: regex
  #   value: "[-A-Za-z']*" # apostrophes and hyphens OK but nothing else
  #   msg: Invalid format for last name
  #   response: drop_field
  source: spotlight
-
  fname: notes_id
  sqltype: text
  varlab: Notes - (SPOT)id patient
  talias: {idnotesp: tablepatientnotes}
-
  fname: notes_idlab
  sqltype: text
  varlab: Notes - (SPOT)id laboratory
  talias: {idnotesl: notes_idlab, tablelabnotes: tablelabnotes, idnotesl: tablelabnotes}
-
  fname: notes_idlabuclh
  sqltype: text
  varlab: Notes - (SPOT)id laboratory UCLH
  talias:
    idnotesU: notes_idlabuclh
    biologicalsamplinguclhnotes: BIOLOGICALSAMPLINGNOTES
    idnotesu: biologicalsamplingnotes
-
  fname: notes_idweb
  sqltype: text
  varlab: Notes - (SPOT)id web portal
  talias: {idpid: notes}
-
  fname: notes_light
  sqltype: text
  varlab: Notes - (SPOT)light web
  talias: {headsfinal: notes}
-
  fname: abgunit
  sqltype: tinyint
  varlab: Arterial blood gas units
  valias:
    k: 1
    m: 2
  vallab:
    1: kPa
    2: mmHg
  checks:
  -
    type: legal_vals
    value: [k, m]
    msg: Invalid response
    response: drop_field
-
  fname: paco2
  sqltype: float
  varlab: Arterial PaCO~2~
  tablerowlabel:
    latex: "PaCO\\textsubscript{2}"
  unitlabel:
    latex: "kPa"
  stataformat: "%9.1f"
  talias: {headsfinal: abgpaco2}
  checks:
  -
    type: min
    value: 0
    msg: Below minimum value
    response: drop_field
  -
    type: max
    value: 760
    msg: Above maximum value
    response: drop_field
  definition: |
    - PaCO~2~ from most recent arterial blood gas within prior hour
  source: spotlight
-
  fname: abgfio2
  sqltype: tinyint
  varlab: Inspired oxygen for ABG measurement
  definition: |
    - Inspired oxygen at the time of last arterial blood gas
  source: spotlight
-
  fname: pao2
  sqltype: float
  varlab: Arterial PaO~2~
  stataformat: "%9.1f"
  talias: {idvisit: abgpao2, headsfinal: abgpao2}
  checks:
  -
    type: min
    value: 0
    msg: Below minimum value
    response: drop_field
  -
    type: max
    value: 760
    msg: Above maximum value
    response: drop_field
  definition: |
    - PaO~2~ from most recent arterial blood gas within prior hour
  source: spotlight
-
  fname: ph
  sqltype: float
  varlab: Arterial pH
  talias: {headsfinal: abgph}
  checks:
  -
    type: min
    value: 6
    msg: Below minimum value
    response: drop_field
  -
    type: max
    value: 9
    msg: Above maximum value
    response: drop_field
  definition: |
    - pH from most recent arterial blood gas within prior hour
  source: spotlight
-
  fname: platelets
  sqltype: smallint
  varlab: Platelets
  unitlabel:
    latex: "{\\texttimes}10\\textsuperscript{9}l \\textsuperscript{-1}"
  units: x10e9
  talias: {idlab: plat, headsfinal: plat}
  checks:
  -
    type: min
    value: 0
    msg: Below minimum value
    response: drop_field
  -
    type: max
    value: 2000
    msg: Above maximum value
    response: drop_field
  definition: |
    - last platelet count measured and recorded either on, or within 24 hours preceding, visit arrival
    - from the 24 hours prior to arrival includes measured and recorded at visit start provided this is prior to any intervention by the visiting team
    - the effects of splenectomy are ignored
    - laboratory results only, i.e. the results of tests performed either in the Departments of Clinical Chemistry or Haematology etc. or in near-patient testing/point-of-care testing laboratories with formal quality control programmes in operation
  source: spotlight
-
  fname: pmh_surg
  sqltype: tinyint
  varlab: Recent surgery
  definition: |
    Recent surgery is defined as surgery in the 30 days prior to day 0 (the day of the index chest radiograph). Surgery is defined as undergoing all or part of a surgical procedure or anaesthesia in an operating theatre or an anaesthetic room.
  talias: {idpatient: recentsurg}
  valias: *value_yesno
  vallab: *label_truefalse
  substitute:
    find: '\b([0-3]?\d)\b' # regex
    replace: y
  checks:
  -
    type: regex
    value: '\b\d{1,2}|y|n|Y|N\b' # apostrophes and hyphens OK but nothing else
    msg: Invalid format for last name
    response: drop_field
-
  fname: allreferrals
  sqltype: tinyint
  varlab: All admissions protocol
  talias: {headsfinal: prospective, sitesfinal: protocol_referrals}
  vallab: {0: 'All admissions', 1: 'All referrals'}
  valias:
    retrospective: 0
    prospective: 1
  notes: |
    All referrals: 'prospective or reds and blues protocol'
    All admissions: 'retrospective or reds only protocol'
-
  fname: pro_or_retro
  sqltype: tinyint
  varlab: Prospective or retrospective data abstraction
  talias: {idvisit: datapro}
  valias: {0: R, 1: P}
  vallab: {0: Retrospective, 1: Prospective}
  checks:
  -
    type: legal_vals
    value: [P,R]
    msg: Illegal response
    response: drop_field
-
  fname: protocol_deviation
  sqltype: tinyint
  sqllen: 16
  varlab: Site level protocol deviation
  talias: {headsfinal: eventtype}
  valias:
    SepsisOnly: 1
    CCOTOnly: 2
    Prospective: 3
    Retrospective: 4
    Suspended: 5
    PoorCompliance: 6
    ReferralPattern: 7
    Backfilling: 8
    PossReportBias: 9
    CMPDincomplete: 10
  vallab:
    1: Only septic cases reported
    2: Only outreach cases reported
    3: Switch to prospective protocol
    4: Switch to retrospective protocol
    5: Data collection suspended
    6: Problems with protocol compliance
    7: Atypical referral pattern
    8: Backfilling
    9: Possible Reporting Bias
    10: CMPD incomplete
  notes: Site level flag when reported or assessed change in protocol
-
  fname: rrate
  sqltype: smallint
  varlab: Respiratory rate
  units: breaths / min
  unitlabel:
    latex: "min\\textsuperscript{-1}"
  talias: {headsfinal: rrate, idvisit: rrate}
  checks:
    -
      type: min
      value: 0
      msg: Below minimum value
      response: drop_field
    -
      type: max
      value: 120
      msg: Above maximum value
      response: drop_field
  definition: |
    - respiratory rate (spontaneous ) measured and recorded on visit arrivaland prior to any therapeutic intervention provided by the visiting team (critical care outreach service (or equivalent) or critical care unit nursing/medical (non-outreach) staff)
    - measurements performed immediately prior to visit arrival may be recorded if the value would be used as part of the clinical assessment at that time
    - respiratory rate values measured during a period of iatrogenic disturbance e.g. physiotherapy, turning, periods of crying, etc. should not be recorded
    - where respiratory values are undetectable, the value zero should be recorded
  source: spotlight
-
  fname: rx_visit
  sqltype: tinyint
  varlab: Visit content
  tablerowlabel:
    latex: Visit interventions
  talias: {headsfinal: vout}
  valias:
    A: 1
    B: 2
    C: 3
  vallab:
    1: Advice/education
    2: Assistance with intervention(s)
    3: Conducting intervention(s)
  checks:
  -
    type: legal_vals
    value: [A,B,C]
    msg: Illegal response
    response: drop_field
  definition: |
    - advice/education is defined as a visit where verbal advice or education is provided by the visiting critical care outreach service (or equivalent) or member(s) of the critical care unit nursing/medical (non-outreach) staff, while on duty for the unit
    - assistance with intervention(s) is defined as a visit where assistance is provided for any planned or ongoing intervention(s) by the visiting critical care outreach service (or equivalent) or member(s) of the critical care unit nursing/medical (non-outreach) staff, while on duty for the unit
    - conducting intervention(s) is defined as a visit where interventions are initiated and conducted by the visiting critical care outreach service (or equivalent) or member(s) of the critical care unit nursing/medical (non-outreach) staff, while on duty for the unit
  source: spotlight
-
  fname: rxcvs_sofa
  sqltype: tinyint
  varlab: Modified CVS SOFA score
  talias: {headsfinal: cvssupp}
  valias:
    A: 0
    B: 1
    C: 2
    D: 3
    E: 4
    G: 5
  vallab:
    0: None
    1: Volume resuscitation
    2: Dopamine <5 or dobutamine (any dose)
    3: Dopamine >=5 or Nor/adrenaline <0.1
    4: Nor/adrenaline >=0.1
    5: Other
  checks:
  -
    type: legal_vals
    value: [A,B,C,D,E,G]
    msg: Illegal response
    response: drop_field
  definition: |
    - highest level of cardiovascular support on visit arrival and prior to any therapeutic intervention provided by the visiting team (critical care outreach service (or equivalent) or critical care unit nursing/medical (non-outreach) staff)
    - record highest level of cardiovascular support being received where none is lowest and adrenaline or noradrenaline >= 0.1 ug kg^-1^ min^-1^ is highest
    - volume resuscitation is defined as the receipt of intravenous fluids (crystalloids or colloids) to correct physiological disturbances of the cardiovascular system-
    - dopamine, noradrenaline and adrenaline are measured in micrograms kg^-1^ min^-1^
  source: spotlight
-
  fname: rxcvs
  sqltype: tinyint
  tablerowlabel:
    latex: "Cardiovascular support"
  vallab:
    0: "None"
    1: "Volume resuscitation"
    2: "Inotropes or vasopressors"
-
  fname: rxcvs_dose
  sqltype: float
  varlab: Highest vasopressor dose
  talias: {idvisit: cvsdose, id_dvr_long: rxcvsdose}
  checks:
  -
    type: min
    value: 0
    msg: Below minimum value
    response: drop_field
  -
    type: max
    value: 25
    msg: Above maximum value
    response: drop_field
-
  fname: rxcvs_drug
  sqltype: char
  varlab: Most potent vasopressor
  talias: {idvisit: cvssupp, id_dvr_long: rxcvsdrug}
  valias:
    D: 1
    N: 2
    A: 3
    V: 4
    O: 5
  vallab:
    1: Dopamine
    2: Noradrenaline
    3: Adrenaline
    4: Vasopressin
    5: Other
  checks:
  -
    type: legal_vals
    value: [D,N,A,V,O]
    msg: Illegal response
    response: drop_field
-
  fname: rxfio2
  sqltype: char
  varlab: Inspired oxgen system
  valiases:
    -
      valias_tables: [headsfinal, headsvisit]
      valias:
        A: 0
        B: 1
        C: 2
        D: 3
        E: 4
        F: 5
        G: 6
        H: 7
  valias:
    R: 0
    W: 1
    V: 2
    B: 3
    C: 4
    N: 5
    P: 6
    O: 7
  talias: {idvisit: fio2sys, headsfinal: fio2sys}
  vallab:
    0: Room air
    1: Wall (variable performance)
    2: Venturi / High-flow
    3: Reservoir bag
    4: CPAP
    5: NIV
    6: IPPV
    7: Other
  substitute:
    find: '[I|i]'
    replace: P
  checks:
  -
    type: legal_vals
    value: [R,W,V,B,C,N,P,O,I]
    msg: Illegal response
    response: drop_field
  definition: |
    - inspired oxygen measured and recorded on visit arrival(when the visiting team has seen fit to alter the inspired oxygen immediately on arrival, and prior to completingtheir assessment, then please record this value and the paired oxygen saturation and/or arterial PaO2)
    - inspired oxygen units are recorded either as % (room air, Venturi, CPAP, NIV or IPPV) or litres min^-1^ (wall, reservoir bag and NIV)
    - inspired oxygen systems are defined as:
        - Room air --- no supplemental oxygen or support (eg. 21%)
        - Wall --- wall oxygen via a mask or nasal cannulae
        - Venturi/High Flow --- wall oxygen contolledcontrolled by the placement of a Venturi device or High Flow system such that the percentage inspired is constant regardless of the patient's inspiratory flow rate
        - Reservoir bag --- wall oxygen via a reservoir bag mask
        - CPAP --- continuous positive airway pressure device via a tight-fitting face mask
        - NIV --- non-invasive ventilation (e.g. BiPAP) via a tight fitting face mask
        - IPPV --- intermittent positive pressure ventilation (i.e. mechanical ventilation) via a mask or tracheal tube
  source: spotlight
-
  fname: rx_resp
  sqltype: tinyint
  tablerowlabel:
    latex: "Respiratory support"
  vallab:
    0: "None"
    1: "Supplemental oxygen"
    2: "Non-invasive ventilation"
-
  fname: rxlimits
  sqltype: tinyint
  varlab: Treatment limitation order
  tablerowlabel:
    latex: Treament limitation order
  talias: {idvisit: limits}
  valias: *value_yesno
  vallab: *label_truefalse
  checks:
  -
    type: legal_vals
    value: [0, 1]
    msg: Illegal response
    response: drop_field
  notes: |
    - derived from v_disposal in (SPOT)light
  definition: |
    - Treatment limits indicate that future critical care admission is not being considered  (e.g. a limitation set as part of the Liverpool Care Pathway) and DNAR indicates existence of a "Do Not Attempt Resuscitation" order
  source: spotlight
-
  fname: rxpeep
  sqltype: tinyint
  varlab: PEEP/CPAP
  talias: {idvisit: fio2peep}
  checks:
  -
    type: min
    value: 0
    msg: Below minimum value
    response: drop_field
  -
    type: max
    value: 25
    msg: Above maximum value
    response: drop_field
-
  fname: rxplat
  sqltype: tinyint
  varlab: Platelet transfusion flag
  talias: {idvisit: platrx}
  valias: *value_yesno
  vallab: *label_truefalse
  checks:
  -
    type: legal_vals
    value: [0, 1]
    msg: Illegal response
    response: drop_field
-
  fname: rxroids
  sqltype: char
  varlab: Corticosteroids
  talias: {idvisit: steroids}
  valias:
    N: 0
    H: 1
    O: 2
  vallab:
    0: None
    1: Shock dose hydrocortisone
    2: Other steroids
  checks:
  -
    type: legal_vals
    value: [N,H,O]
    msg: Illegal response
    response: drop_field
-
  fname: rxrrt
  sqltype: tinyint
  varlab: Renal replacement therapy flag
  tablerowlabel:
    latex: "Renal replacement therapy"
  talias:
    idvisit: ccmdsrenal
    headsfinal: dialysis
  valias: *value_yesno
  vallab: *label_truefalse
  checks:
  -
    type: legal_vals
    value: [0, 1]
    msg: Illegal response
    response: drop_field
  definition: |
    - specifies whether patient has received renal replacement therapy for chronic or acute renal disease within the last 7 days
    - includes, but is not limited to, haemodialysis, haemofiltration and peritoneal dialysis
  source: spotlight
-
  fname: rxsed
  sqltype: tinyint
  varlab: Sedation flag
  talias:
    idvisit: sedated
  valias: *value_yesno
  vallab: *label_truefalse
  checks:
  -
    type: legal_vals
    value: [0, 1]
    msg: Illegal response
    response: drop_field
-
  fname: sepsis
  sqltype: tinyint
  varlab: Clinical sepsis
  tablerowlabel:
    latex: Reported sepsis diagnosis
  valias:
   A: 1
   B: 2
   C: 3
   D: 4
  vallab:
   1: Very unlikely
   2: Unlikely
   3: Likely
   4: Very Likely
  definition: |
    - sepsis status on visit arrival
    - sepsis is a clinical syndrome defined by the presence of a systemic inflammatory response to the presence of infection
  source: spotlight
-
  fname: sepsis_severity
  sqltype: tinyint
  varlab: Sepsis status
  tablerowlabel:
    latex: Sepsis status
  vallab:
    0: Neither SIRS nor sepsis
    1: SIRS
    2: Sepsis
    3: Severe sepsis
    4: Septic shock
-
  fname: sepsis1
  sqltype: tinyint
  varlab: Reported sepsis
  tablerowlabel:
    latex: Reported sepsis
  vallab:
    0: Unlikely
    1: Likely
-
  fname: sepsis_site
  sqltype: tinyint
  varlab: Clinical source of sepsis
  tablerowlabel:
    latex: Reported source of sepsis
  talias: {headsfinal: sepsite}
  valias:
    A: 1
    B: 2
    C: 3
    D: 4
    E: 5
    F: 6
    G: 7
    J: 8
    H: 9
    I: 10
  vallab:
    1: Respiratory
    2: Cardiovascular
    3: Gastrointestinal
    4: Neurological
    5: Genitourinary
    6: Musculoskeletal
    7: Dermatological
    8: Catheter Releated Bloodstream Infection
    9: Other
    10: Source uncertain
  source: spotlight
  definition: |
    - most likely source, or organ system, of infection causing sepsis
    - if more than one source and you consider one to be most important then select this
    - if more than one source and you consider them to be of similar importance then select "Other" and append an explanatory note in the visit notes field
-
  fname: sex
  sqltype: tinyint
  varlab: Sex
  tablerowlabel:
    latex: Sex
  talias: {idpid: gender, lightPID: sex, headsfinal: sex}
  valias:
    M: 1
    F: 0
  vallab:
    1: Male
    0: Female
  notes: |
    - follows the same pattern as male i.e. male 1 female 0
  definition: |
    - genotypical (as they were born ...) sex of patient
  source: spotlight
-
  fname: male
  sqltype: tinyint
  tablerowlabel:
    latex: Male sex
  vallab:
    0: Female
    1: Male
-
  fname: sitecode
  sqltype: char
  sqllen: 3
  varlab: (SPOT)id site code
  valias: {frh: fre}
  vallab:
    ucl: university college hospital
    med: medway maritime hospital
    pol: poole hospital
    yeo: yeovil district hospital
    sou: southend university hospital
    lis: lister hospital
    rvi: royal victoria infirmary
    har: harrogate district hospital
    ket: kettering general hospital
    nor: northampton general hospital
    fre: freeman hospital
  talias: {idwide: sitename, idlab: sitecode, idpatient: sitecode, idvisit: sitecode, idlabuclh: sitecode, idpid: sitename}
  checks:
  -
    type: legal_vals
    value: [UCL,MED,POL,YEO,SOU,LIS,RVI,HAR,KET,NOR,FRE]
    msg: Illegal response
    response: drop_record
-
  fname: sitename
  sqltype: char
  sqllen: 128
  varlab: Hospital name
  valias:
    university college hospital: ucl
    medway maritime hospital: med
    poole hospital: pol
    yeovil district hospital: yeo
    southend university hospital:  sou
    lister hospital: lis
    royal victoria infirmary: rvi
    harrogate district hospital: har
    kettering general hospital: ket
    northampton general hospital: nor
    freeman hospital: fre
  talias: {idpid: hospitalname}
-
  fname: dorisname
  sqltype: char
  sqllen: 128
  varlab: Hospital name
  talias: {headsfinal: nameSite, tailsmini: hospname}
  notes: hospital name from CMP not checked that matches dorisname from other reports
-
  fname: smpedta
  sqltype: char
  varlab: Plasma sample flag
  talias: {idlabuclh: edta}
  valias: *value_yesno
  vallab: *label_truefalse
  checks:
  -
    type: legal_vals
    value: [0, 1]
    msg: Illegal response
    response: drop_field
-
  fname: smppath
  sqltype: char
  varlab: Pathology sample flag
  talias: {idlabuclh: serumsample}
  valias: *value_yesno
  vallab: *label_truefalse
  checks:
  -
    type: legal_vals
    value: [0, 1]
    msg: Illegal response
    response: drop_field
-
  fname: smppax1
  sqltype: char
  varlab: 1st PAX gene sample flag
  talias: {idlabuclh: 1stpax} # 1stpax gene sample
  valias: *value_yesno
  vallab: *label_truefalse
  checks:
  -
    type: legal_vals
    value: [0, 1]
    msg: Illegal response
    response: drop_field
-
  fname: smppax2
  sqltype: char
  varlab: 2nd PAX gene sample flag
  talias: {idlabuclh: 2ndpax} # 2ndpax gene sample
  valias: *value_yesno
  vallab: *label_truefalse
  checks:
  -
    type: legal_vals
    value: [0, 1]
    msg: Illegal response
    response: drop_field
-
  fname: smppax
  sqltype: tinyint
  varlab: PAXgene available
  vallab: *label_truefalse
-
  fname: smpserum
  sqltype: char
  varlab: Serum sample flag
  talias: {idlabuclh: serumstorage}
  valias: *value_yesno
  vallab: *label_truefalse
  checks:
  -
    type: legal_vals
    value: [0, 1]
    msg: Illegal response
    response: drop_field
-
  fname: sodium
  sqltype: smallint
  varlab: Serum sodium
  unitlabel:
    latex: "mmol l\\textsuperscript{-1}"
  units: mmol / l
  talias: {idlab: hna, headsfinal: hna}
  checks:
  -
    type: min
    value: 80
    msg: Below minimum value
    response: drop_field
  -
    type: max
    value: 200
    msg: Above maximum value
    response: drop_field
  definition: |
    - last sodium measured and recorded either on, or within 24 hours preceding, visit arrival
    - from the 24 hours prior to arrival includes measured and recorded at visit start provided this is prior to any intervention by the visiting team
    - laboratory results only, i.e. the results of tests performed either in the Departments of Clinical Chemistry or Haematology etc. or in near-patient testing/point-of-care testing laboratories with formal quality control programmes in operation --- includes blood gas analyser
  source: spotlight
-
  fname: sofa_d0
  sqltype: tinyint
  varlab: Reported day 0 SOFA
  talias: {idpid: sofa_day0}
  checks:
  -
    type: min
    value: 0
    msg: Below minimum value
    response: drop_field
  -
    type: max
    value: 24
    msg: Above maximum value
    response: drop_field
-
  fname: sofa_d2
  sqltype: tinyint
  varlab: Reported day 2/4 SOFA
  talias: {idpid: sofa_day2}
  checks:
  -
    type: min
    value: 0
    msg: Below minimum value
    response: drop_field
  -
    type: max
    value: 24
    msg: Above maximum value
    response: drop_field
-
  fname: spo2
  sqltype: tinyint
  varlab: Oxygen saturation
  unitlabel:
    latex: "\\%"
  talias: {idvisit: spo2, headsfinal: spo2}
  checks:
  -
    type: min
    value: 0
    msg: Below minimum value
    response: drop_field
  -
    type: max
    value: 100
    msg: Above maximum value
    response: drop_field
  definition: |
    - oxygen saturation measured and recorded on visit arrivaland prior to any therapeutic intervention provided by the visiting team (critical care outreach service (or equivalent) or critical care unit nursing/medical (non-outreach) staff) other than changes in the inspired oxygen when this is the value documented in the inspired oxygen field
    - measurements performed immediately prior to visit arrival may be recorded if the value would be used as part of the clinical assessment at that time
    - peripheral oxygen saturation is measured by a pulse oximeter which displays the percentage of arterial haemoglobin in the oxyhaemoglobin configuration
    - where peripheral oxygen saturation is undetectable, the value zero should be recorded
  source: spotlight
-
  fname: temperature
  sqltype: float
  varlab: Temperature
  unitlabel:
    latex: "{\\textdegree}C"
  stataformat: "%9.1f"
  units: degrees centrigrade
  talias: {idvisit: ftemp, headsfinal: temp, id_dvr_long: temp}
  checks:
  -
    type: min
    value: 33.0
    msg: Below minimum value
    response: drop_field
  -
    type: max
    value: 45.0
    msg: Above maximum value
    response: drop_field
  definition: |
    - measurements performed immediately prior to visit arrival may be recorded if the value would be used as part of the clinical assessment at that time
    - central (preferred) or non-central temperature value measured and recorded on visit arrivaland prior to any therapeutic intervention provided by the visiting team (critical care outreach service (or equivalent) or critical care unit nursing/medical (non-outreach) staff)
    - tympanic membrane, nasopharyngeal, oesophageal, rectal, pulmonary artery and bladder are considered to be central temperature measurement sites; all other sites are considered to be non-central
    - temperature values are included irrespective of whether the value was artificially manipulated through treatment such as central cooling
    - temperature values measured and recorded for the purpose of estimating perfusion e.g. toe or ear lobe are not to be included
  notes: |
    Set minimum to 33 because it seems more likely that someone typed a 2 or a 3 when they meant a 3 or a 4 than there being an inpatient with a temperature <33
  source: spotlight
-
  fname: title
  sqltype: char
  varlab: Salutation
  talias: {idpid: title}
  vallab:
    A: Mr
    B: Mrs
    C: Miss
    F: Ms
-
  fname: tsh
  sqltype: float
  varlab: Thyroid stimulating hormone
  units: mIU / l
  talias: {idlabuclh: tsh}
  checks:
  -
    type: min
    value: 0
    msg: Below minimum value
    response: drop_field
  -
    type: max
    value: 30
    msg: Above maximum value
    response: drop_field
-
  fname: urea
  sqltype: float
  varlab: Serum urea
  units: mmol / l
  unitlabel:
    latex: "mmol l\\textsuperscript{-1}"
  stataformat: "%9.1f"
  talias: {idlab: hurea, headsfinal: urea}
  checks:
  -
    type: min
    value: 0
    msg: Below minimum value
    response: drop_field
  -
    type: max
    value: 100
    msg: Above maximum value
    response: drop_field
  definition: |
    - last urea measured and recorded either on, or within 24 hours preceding, visit arrival
    - from the 24 hours prior to arrival includes measured and recorded at visit start provided this is prior to any intervention by the visiting team
    - laboratory results only, i.e. the results of tests performed either in the Departments of Clinical Chemistry or Haematology etc. or in near-patient testing/point-of-care testing laboratories with formal quality control programmes in operation --- includes blood gas analyser
  source: spotlight
-
  fname: urine_period
  sqltype: tinyint
  varlab: Urine measurement period
  talias: {headsfinal: urvoltime}
  valias:
    A: 1
    B: 2
    C: 3
    D: 4
  vallab:
    1: over 1 hour
    2: over 6 hours
    3: over 12 hours
    4: since midnight
-
  fname: urine_vol
  sqltype: smallint
  varlab: Urine volume over reported period
  talias: {headsfinal: uvol}
  checks:
  -
    type: min
    value: 0
    msg: Below minimum value
    response: drop_field
  -
    type: max
    value: 24000
    msg: Above maximum value
    response: drop_field
  definition: |
    - urine volume recorded on visit arrivaland prior to any therapeutic intervention provided by the visiting team (critical care outreach service (or equivalent) or critical care unit nursing/medical (non-outreach) staff)
    - total urine volume is recorded for urine volume measurement period recorded
    - urine volume measurement periods may be (with reference to the visit)
        - in the last hour
        - in the last six hours
        - in the last twelve hours
        - since midnight
    - total urine volume in last six hours is preferred value
    - where total urine volume is zero, the value zero should be recorded
    - no account is taken of the effect of diuretics
    - record not available if either not measured or not recorded
  source: spotlight
-
  fname: urine1
  sqltype: smallint
  varlab: Hourly urine volume
  talias: {idvisit: uvolh}
  checks:
  -
    type: min
    value: 0
    msg: Below minimum value
    response: drop_field
  -
    type: max
    value: 1000
    msg: Above maximum value
    response: drop_field
-
  fname: urine24
  sqltype: smallint
  varlab: 24 hourly urine volume
  talias: {idvisit: uvold}
  checks:
  -
    type: min
    value: 0
    msg: Below minimum value
    response: drop_field
  -
    type: max
    value: 24000
    msg: Above maximum value
    response: drop_field
-
  fname: v_cmpadmx
  sqltype: tinyint
  varlab: CMP unit admission flag
  talias: {headsfinal: voutcmp}
  valias: *value_yesno
  vallab: *label_truefalse
  checks:
  -
    type: legal_vals
    value: [0, 1]
    msg: Illegal response
    response: drop_field
-
  fname: v_cmpadmx_pct
  sqltype: tinyint
  varlab: Critical admissions to CMP units
  units: percent
  notes: poorly reported so percentage frequently more than 100
-
  fname: v_arrest
  sqltype: tinyint
  varlab: Arrest status at visit
  talias: {headsfinal: vstatus}
  valias:
    P: 1
    R: 2
    C: 3
    N: 0
  vallab:
    1: Peri-arrest
    2: Respiratory arrest
    3: Cardiac arrest
    0: Neither arrest nor peri-arrest
  definition: |
    - arrest status on visit arrival
    - peri-arrest is defined as a patient in extremis and where it is judged that a cardiorespiratory arrest is imminent on visit arrival
    - respiratory arrest is defined as absence of respiratory effort for a period of sufficient duration that rescue breathing or mechanical ventilation has been initiated
    - cardiorespiratory arrest is defined as a patient receiving chest compressions and/or defibrillation on visit arrival
  source: spotlight
-
  fname: v_ccmds
  sqltype: tinyint
  varlab: Current CCMDS level of care
  tablerowlabel:
    latex: Level of care at time of visit
  valias: &value_ccmds
    A: 0
    B: 1
    C: 2
    D: 3
  vallab: &label_ccmds
    0: Level 0
    1: Level 1
    2: Level 2
    3: Level 3
  talias: {headsfinal: ccmdspre, idvisit: ccmds, id_dvr_long: ccmds, headsvisit: ccmpdspre}
  definition: |
    - if the visiting member of staff is a member of the critical care outreach team then do not use their current presence to define level of care on visit arrival
    - location does not determine Level of care
    - for definitions of organ support see: [ICS Levels of Care](http://www.ics.ac.uk/intensive_care_professional/standards_and_guidelines/levels_of_critical_care_for_adult_patients)
    - Level 0 - indicated by the following:
        - admissions in hospital and receiving normal ward care
        - Observations required less frequently than 4 hourly.
    - Level 1 - indicated by one or more of the following:
        - admissions recently discharged from a higher level of care
        - admissions receiving a greater degree of observation, monitoring, intervention(s), clinical input or advice than Level 0 care
        - admissions receiving critical care outreach service support fulfilling the medium-score group, or higher, as defined by NICE Guidelines 50
    - Level 2 - indicated by one or more of the following:
        - admissions receiving monitoring and support for one organ system dysfunction (excluding gastrointestinal support) due to an acute illness
        - admissions solely receiving advanced respiratory monitoring and support due to an acute illness meet Level 3
        - admissions solely receiving basic respiratory and basic cardiovascular monitoring and support due to an acute illness meet Level 2
        - admissions receiving pre-surgical optimisation including invasive monitoring and treatment to improve organ system function
        - admissions receiving extended post-surgical care either because of the procedure and/or the condition of the admission
        - admissions stepping down to Level 2 from Level 3 care
    - Level 3 - indicated by one or more of the following:
        - admissions receiving advanced respiratory monitoring and support due to an acute illness
        - admissions receiving monitoring and support for two or more organ system dysfunctions (excluding gastrointestinal support) due to an acute illness
        - admissions solely receiving basic respiratory monitoring and support and basic cardiovascular monitoring and support due to an acute illness only meet Level 2
  checks:
  -
    type: min
    value: 0
    msg: Below minimum value
    response: drop_field
  -
    type: max
    value: 3
    msg: Above maximum value
    response: drop_field
  source: spotlight
-
  fname: v_ccmds_rec
  sqltype: tinyint
  varlab: Recommended CCMDS level of care
  tablerowlabel:
    latex: Recommended CCMDS level of care
  valias: *value_ccmds
  vallab: *label_ccmds
  talias: {headsfinal: ccmdspost}
  checks:
  -
    type: min
    value: 0
    msg: Below minimum value
    response: drop_field
  -
    type: max
    value: 3
    msg: Above maximum value
    response: drop_field
  definition: |
    - agreed Level of care recommended at end of visit i.e. on departure
    - for definitions see Level of care at the time of the assessment
  source: spotlight
-
  fname: v_ccot
  sqltype: char
  varlab: Visit outreach contact
  talias: {idvisit: ccotvisit}
  valias:
    O: 1
    C: 2
    M: 3
    U: 4
    B: 5
    N: 0
  vallab:
    1: Outreach service only
    2: Outreach / Medical staff combined
    3: Unit Medical staff only
    4: Unit Nursing staff only
    5: Both unit medical and nursing staff
    0: No critical care contact
  checks:
  -
    type: legal_vals
    value: [O,C,M,U,B,N]
    msg: Illegal response
    response: drop_field
-
  fname: v_daymonth
  sqltype: char
  sqllen: 4
  varlab: Visit day-month (DDMM)
  talias: {idlab: vdate}
  checks:
  -
    type: regex
    value: '\b\d{4}\b'
    msg: Invalid format for DDMM date
    response: drop_field
-
  fname: v_sampledate
  sqltype: date
  varlab: Sample date (DDMMYY) format for UCLH bloods
  talias: {idlabuclh: sampledate}
  checks:
-
  fname: v_sampletime
  sqltype: char
  sqllen: 4
  varlab: Sample time (HHMM) format for UCLH bloods
  talias: {idlabuclh: sampletime}
  checks:
-
  fname: v_date
  sqltype: date
  varlab: Visit date
  talias: {idvisit: vdate, idlabuclh: sampledate, id_dvr_long: dass}
  checks:
  -
    type: min
    value: 2010-09-01
    msg: Below minimum value
    response: drop_record
  -
    type: max
    value: 2012-10-31
    msg: Above maximum value
    response: drop_record
-
  fname: v_dofw
  sqltype: tinyint
  varlab: "Day of week (1: Monday, ...)"
-
  fname: v_timestamp
  sqltype: timestamp
  varlab: Visit date-time
  talias: {headsfinal: vdate, headsvisit: mmtvisit}
  checks:
  -
    type: min
    value: 2010-09-01 00:00:00
    msg: Below minimum value
    response: drop_record
  -
    type: max
    value: 2013-12-31 23:59:59
    msg: Above maximum value
    response: drop_record
  definition: |
    - date and time of visit to patient
    - a visit is defined as the physical attendance of member(s) of the critical care outreach service (or equivalent) or member(s) of the critical care unit nursing/medical (non-outreach) staff while on duty for the unit
    - a critical care visit should only be recorded if one possible outcome from the visit was the patient remaining at their current location, therefore retrieval by critical care staff is not included
    - the visit must be documented in the patient record
  source: spotlight
-
  fname: studymonth
  sqltype: tinyint
  varlab: study month  -spotlight
-
  fname: v_dc
  sqltype: tinyint
  varlab: Visit discharge flag
  talias: {headsfinal: discharged}
  valias: *value_yesno
  vallab: *label_truefalse
  checks:
  -
    type: legal_vals
    value: [0, 1]
    msg: Illegal response
    response: drop_field
-
  fname: v_delay
  sqltype: smallint
  varlab: Referral delay prior to visit
  talias: {headsfinal: vdelay}
-
  fname: v_disposal
  sqltype: tinyint
  varlab: Patient disposal at visit end
  talias: {headsfinal: followup}
  valias:
    A: 1
    B: 2
    C: 3
    D: 4
    E: 5
    F: 6
    G: 7
  vallab:
    1: Defer - no Rx limits
    2: Defer - with Rx limits
    3: Accepted L2 bed
    4: Accepted L3 bed
    5: No f/up - no Rx limits
    6: No f/up - with Rx limits
    7: Died
  definition: |
    - visit outcome decided by the visiting critical care outreach service (or equivalent) or member(s) of the critical care unit nursing/medical (non-outreach) staff, while on duty for the unit
    - review planned --- indicates that the patient will be followed-up (outside a critical care area) by the critical care outreach service (or equivalent) or member(s) of the critical care unit nursing/medical (non-outreach) staff, while on duty for the unit
    - review not planned --- accepted to critical care area (specify whether this is initially to a Level 2 or 3 bed); where this option is selected then specify whether the critical care unit is in the Case Mix Programme
    - review not planned --- not clinically indicated at end of visit
    - review not planned --- patient died
    - treatment limits indicate that future critical care admission is not being considered  (e.g. a limitation set as part of the Liverpool Care Pathway) and DNAR indicates existence of a "Do Not Attempt Resuscitation" order
  source: spotlight
-
  fname: v_first
  sqltype: tinyint
  varlab: First critical care review
  talias: {headsfinal: initialvisit}
  valias: *value_yesno
  vallab: *label_truefalse
  checks:
  -
    type: legal_vals
    value: [0, 1]
    msg: Illegal response
    response: drop_field
-
  fname: v_loca
  sqltype: tinyint
  varlab: Patient in critical care bed
  talias: {idvisit: ccunit}
  valias: *value_yesno
  vallab: *label_truefalse
  checks:
  -
    type: legal_vals
    value: [0, 1]
    msg: Illegal response
    response: drop_field
-
  fname: v_time
  sqltype: time
  varlab: Visit time
  talias: {idlabuclh: sampletime, idvisit: vtime}
-
  fname: v_timely
  sqltype: tinyint
  varlab: Timeliness of first visit
  tablerowlabel:
    latex: Timely referral to ICU
  definition: |
    - A timely first visit is defined as an appropriately timed visit
    - Delay is defined subjectively when an earlier visit would have been warranted
  talias: {headsfinal: vtimely}
  valias: *value_yesno
  vallab: *label_truefalse
  checks:
  -
    type: legal_vals
    value: [0, 1]
    msg: Illegal response
    response: drop_field
  source: spotlight
-
  fname: v_ward
  sqltype: char
  sqllen: 128
  talias: {headsfinal: vward}
  varlab: Ward housing patient at time of visit
  definition: |
    - name of ward housing patient at time of visit
    - a visit is defined as the physical attendance of member(s) of the critical care outreach service (or equivalent) or member(s) of the critical care unit nursing/medical (non-outreach) staff while on duty for the unit
    - the visit must be documented in the patient record
  source: spotlight
-
  fname: vitals
  sqltype: tinyint
  varlab: Frequency of nursing observations
  tablerowlabel:
    latex: Nursing observations
  talias: {headsfinal: obs}
  valias: &value_vitals
    C: 5
    O: 4
    F: 3
    T: 2
    L: 1
  vallab: &label_vitals
    5: Continuous monitoring
    4: Up to 1 hrly (inclusive)
    3: Up to 4 hrly (inclusive)
    2: Up to 12 hrly (inclusive)
    1: Less frequently than 12 hrly
  definition: |
    - Hourly refers to the frequency not to the interval hence <= 4 hourly is defined as observations that are made every 4 hours or more often (e.g. every 4 hours, every 2 hours etc.)
    - most frequently recorded vital sign (blood pressure, heart rate, respiratory rate, temperature) on arrival
    - continuous implies the use of an electronic bedside monitor
  source: spotlight
-
  fname: wcc
  sqltype: float
  varlab: White cell count
  units: x10e9 cells / l
  stataformat: "%9.1fc"
  unitlabel:
    latex: "{\\texttimes}10\\textsuperscript{9}l \\textsuperscript{-1}"
  talias: {idlab: wcc, headsfinal: wcc}
  checks:
  -
    type: min
    value: 0
    msg: Below minimum value
    response: drop_field
  -
    type: max
    value: 150
    msg: Above maximum value
    response: drop_field
  definition: |
    - last white cell count measured and recorded either on, or within 24 hours preceding, visit arrival
    - from the 24 hours prior to arrival includes measured and recorded at visit start provided this is prior to any intervention by the visiting team
    - laboratory results only, i.e. the results of tests performed either in the Departments of Clinical Chemistry or Haematology etc. or in near-patient testing/point-of-care testing laboratories with formal quality control programmes in operation
  source: spotlight
-
  fname: key_icnarc
  sqltype: char
  sqllen: 64
  talias: {}
  varlab: Unique ICNARC key
-
  fname: lite_open
  sqltype: date
  varlab: (SPOT)light site open date
  talias: {headsfinal: date_opened}
-
  fname: lite_close
  sqltype: date
  varlab: (SPOT)light site close date
  talias: {headsfinal: date_closed}
-
  fname: id_open
  sqltype: date
  varlab: (SPOT)id site open date
  talias: {}
-
  fname: id_close
  sqltype: date
  varlab: (SPOT)id site close date
  talias: {}
-
  fname: lite_protocol
  sqltype: char
  sqllen: 16
  varlab: Initial data collection protocol
  talias: {}
-
  fname: ccot
  sqltype: tinyint
  varlab: Critical Care Outreach Team flag
  talias: {}
-
  fname: ccot_start
  sqltype: tinyint
  varlab: CCOT typical start time
-
  fname: ccot_wte
  sqltype: float
  varlab: CCOT team whole-time equivalents
-
  fname: ccot_senior
  sqltype: char
  sqllen: 7
  varlab: CCOT most senior nurse band
-
  fname: ccot_consultant
  sqltype: tinyint
  varlab: Consultant cover for CCOT
-
  fname: ccot_cover_ward
  sqltype: tinyint
  varlab: CCOT covers wards
  valias: &value_frequency
    Never: 0
    Rarely: 1
    Sometimes: 2
    Mostly: 3
    Always: 4
    None: NULL
  vallab: &label_frequency
    0: Never
    1: Rarely
    2: Sometimes
    3: Mostly
    4: Always
-
  fname: ccot_cover_ae
  sqltype: tinyint
  varlab: CCOT covers A and E
  valias: *value_frequency
  vallab: *label_frequency
-
  fname: ccot_cover_obs
  sqltype: tinyint
  varlab: CCOT covers observation ward
  valias: *value_frequency
  vallab: *label_frequency
-
  fname: ccot_cover_mau
  sqltype: tinyint
  varlab: CCOT covers medical admissions ward
  valias: *value_frequency
  vallab: *label_frequency
-
  fname: ccot_cover_theatre
  sqltype: tinyint
  varlab: CCOT covers theatres
  valias: *value_frequency
  vallab: *label_frequency
-
  fname: ccot_days
  sqltype: tinyint
  varlab: CCOT days per week
  talias: {}
-
  fname: ccot_hours
  sqltype: tinyint
  varlab: CCOT hours per day
  talias: {}
-
  fname: ccot_shift_pattern
  sqltype: tinyint
  varlab: CCOT shift pattern
  derived: True
  primaryfields: [ccot_hours, ccot_days, ccot]
  code:
    python: |
      if ccot_hours == 24 and ccot_days == 7:
        derived_var = 3
      elif ccot_days == 7:
        derived_var = 2
      else:
        derived_var = 1
      if ccot == 0:
        derived_var = 0
  vallab:
    0: None
    1: Less than 7 days
    2: 7 days/week
    3: 24 hrs/day 7 days/week
-
  fname: lrti_symp
  sqltype: tinyint
  varlab: Clinical pneumonia
  talias: {idpatient: diagpneumo, id_dvr_wide: pneusymp}
  vallab: *label_prob
  checks:
  -
    type: min
    value:  1
    msg: Below minimum value
    response: drop_record
  -
    type: max
    value: 4
    msg: Above maximum value
    response: drop_record
-
  fname: lrti_days
  sqltype: tinyint
  varlab: Duration of illness
  units: days
  talias: {idpatient: timeduration, id_dvr_wide: pneudays}
  checks:
  -
    type: min
    value: 0
    msg: Below minimum value
    response: drop_field
  -
    type: max
    value: 28
    msg: Above maximum value
    response: drop_field
-
  fname: ha_res
  sqltype: tinyint
  varlab: Residence prior to admission
  talias: {idpatient: pres}
  vallab:
    1: Home
    2: Nursing home or equivalent
    3: Health related institution
    4: Non-health related institution
    5: Residential place of work/education
    6: Hospice or equivalent
    7: No fixed address / temporary abode
    8: Other
  checks:
  -
    type: min
    value: 1
    msg: Below minimum value
    response: drop_record
  -
    type: max
    value: 8
    msg: Above maximum value
    response: drop_record
-
  fname: ethnicity
  sqltype: tinyint
  varlab: Ethnicity
  talias: {idpatient: ethnic}
  valias:
    A: 1
    B: 2
    C: 3
    D: 4
    E: 5
    F: 6
    G: 7
    H: 8
    J: 9
    K: 10
    L: 11
    M: 12
    N: 13
    P: 14
    R: 15
    S: 16
    Z: 17
  vallab:
    1: White British
    2: White Irish
    3: White any other
    4: Mixed white and black Caribbean
    5: Mixed white and black African
    6: Mixed white and Asian
    7: Mixed - any other
    8: Asian or Asian-British-Indian
    9: Asian or Asian-British-Pakistani
    10: Asian or Asian-British-Bangladeshi
    11: Asian or Asian-British-any other
    12: Black or black-British-Caribbean
    13: Black or black-British-African
    14: Black or black-British-any other
    15: Other ethnic group-Chinese
    16: Any other ethnic group
    17: Not stated
  checks:
  -
    type: min
    value: 1
    msg: Below minimum value
    response: drop_record
  -
    type: max
    value: 17
    msg: Above maximum value
    response: drop_record
-
  fname: white
  sqltype: tinyint
  varlab: White ethnicity
  tablerowlabel:
    latex: "White ethnicity"
  vallab: *label_truefalse
  source: CMPD
-
  fname: pmhmi
  sqltype: char
  varlab: Myocardial Infarction
  talias: {idpatient: charlsonmi}
  valias: &value_pmh
    N: 0
    P: 1
    I: 2
  vallab: &label_pmh
    0: None
    1: Previous history
    2: Recent inpatient
  checks:
  -
    type: legal_vals
    value: [N,P,I]
    msg: Illegal response
    response: drop_record
-
  fname: pmhhf
  sqltype: char
  varlab: Heart failure
  talias: {idpatient: charlsonhf}
  valias: *value_pmh
  vallab: *label_pmh
  checks:
  -
    type: legal_vals
    value: [N,P,I]
    msg: Illegal response
    response: drop_record
-
  fname: pmhpvd
  sqltype: char
  varlab: Peripheral vascular disease
  talias: {idpatient: charlsonpvd}
  valias: *value_pmh
  vallab: *label_pmh
  checks:
  -
    type: legal_vals
    value: [N,P,I]
    msg: Illegal response
    response: drop_record
-
  fname: pmhcvd
  sqltype: char
  varlab: Cerebrovascular disease
  talias: {idpatient: charlsoncvd}
  valias: *value_pmh
  vallab: *label_pmh
  checks:
  -
    type: legal_vals
    value: [N,P,I]
    msg: Illegal response
    response: drop_record
-
  fname: pmhhemi
  sqltype: char
  varlab: Hemiplegia
  talias: {idpatient: charlsonhemi}
  valias: *value_pmh
  vallab: *label_pmh
  checks:
  -
    type: legal_vals
    value: [N,P,I]
    msg: Illegal response
    response: drop_record
-
  fname: pmhaids
  sqltype: char
  varlab: AIDS
  talias: {idpatient: charlsonaids}
  valias: *value_pmh
  vallab: *label_pmh
  checks:
  -
    type: legal_vals
    value: [N,P,I]
    msg: Illegal response
    response: drop_record
-
  fname: pmhmld
  sqltype: char
  varlab: Mild liver disease
  talias: {idpatient: charlsonmld}
  valias: *value_pmh
  vallab: *label_pmh
  checks:
  -
    type: legal_vals
    value: [N,P,I]
    msg: Illegal response
    response: drop_record
-
  fname: pmhsld
  sqltype: char
  varlab: Moderate or severe liver disease
  talias: {idpatient: charlsonsld}
  valias: *value_pmh
  vallab: *label_pmh
  checks:
  -
    type: legal_vals
    value: [N,P,I]
    msg: Illegal response
    response: drop_record
-
  fname: pmhckd
  sqltype: char
  varlab: Moderate or severe renal disease
  talias: {idpatient: charlsonckd}
  valias: *value_pmh
  vallab: *label_pmh
  checks:
  -
    type: legal_vals
    value: [N,P,I]
    msg: Illegal response
    response: drop_record
-
  fname: pmhctd
  sqltype: char
  varlab: Connective tissue disease
  talias: {idpatient: charlsonctd}
  valias: *value_pmh
  vallab: *label_pmh
  checks:
  -
    type: legal_vals
    value: [N,P,I]
    msg: Illegal response
    response: drop_record
-
  fname: pmhud
  sqltype: char
  varlab: GI ulcer disease
  talias: {idpatient: charlsonud}
  valias: *value_pmh
  vallab: *label_pmh
  checks:
  -
    type: legal_vals
    value: [N,P,I]
    msg: Illegal response
    response: drop_record
-
  fname: pmhdem
  sqltype: char
  varlab: Dementia
  talias: {idpatient: charlsondem}
  valias: *value_pmh
  vallab: *label_pmh
  checks:
  -
    type: legal_vals
    value: [N,P,I]
    msg: Illegal response
    response: drop_record
-
  fname: pmhdm
  sqltype: char
  varlab: Diabetes
  talias: {idpatient: charlsondm}
  valias: *value_pmh
  vallab: *label_pmh
  checks:
  -
    type: legal_vals
    value: [N,P,I]
    msg: Illegal response
    response: drop_record
-
  fname: pmhdmend
  sqltype: char
  varlab: Diabetes with end organ damage
  talias: {idpatient: charlsondmend}
  valias: *value_pmh
  vallab: *label_pmh
  checks:
  -
    type: legal_vals
    value: [N,P,I]
    msg: Illegal response
    response: drop_record
-
  fname: pmhtumour
  sqltype: char
  varlab: Any solid tumour
  talias: {idpatient: charlsontumour}
  valias: *value_pmh
  vallab: *label_pmh
  checks:
  -
    type: legal_vals
    value: [N,P,I]
    msg: Illegal response
    response: drop_record
-
  fname: pmhmets
  sqltype: char
  varlab: Metastatic solid tumour
  talias: {idpatient: charlsonmets}
  valias: *value_pmh
  vallab: *label_pmh
  checks:
  -
    type: legal_vals
    value: [N,P,I]
    msg: Illegal response
    response: drop_record
-
  fname: pmhlymph
  sqltype: char
  varlab: Lymphoma
  talias: {idpatient: charlsonlymp}
  valias: *value_pmh
  vallab: *label_pmh
  checks:
  -
    type: legal_vals
    value: [N,P,I]
    msg: Illegal response
    response: drop_record
-
  fname: pmhleuk
  sqltype: char
  varlab: Leukaemia
  talias: {idpatient: charlsonleuk}
  valias: *value_pmh
  vallab: *label_pmh
  checks:
  -
    type: legal_vals
    value: [N,P,I]
    msg: Illegal response
    response: drop_record
-
  fname: pmhasth
  sqltype: char
  varlab: Asthma
  talias: {idpatient: pmhasth}
  valias: *value_pmh
  vallab: *label_pmh
  checks:
  -
    type: legal_vals
    value: [N,P,I]
    msg: Illegal response
    response: drop_record
-
  fname: pmhtb
  sqltype: char
  varlab: Tuberculosis
  talias: {idpatient: pmhtb}
  valias: *value_pmh
  vallab: *label_pmh
  checks:
  -
    type: legal_vals
    value: [N,P,I]
    msg: Illegal response
    response: drop_record
-
  fname: pmhbronch
  sqltype: char
  varlab: Bronchiectasis
  talias: {idpatient: pmhbronch}
  valias: *value_pmh
  vallab: *label_pmh
  checks:
  -
    type: legal_vals
    value: [N,P,I]
    msg: Illegal response
    response: drop_record
-
  fname: pmhcopd
  sqltype: char
  varlab: Chronic obstructive airways disease
  talias: {idpatient: pmhcopd}
  valias: *value_pmh
  vallab: *label_pmh
  checks:
  -
    type: legal_vals
    value: [N,P,I]
    msg: Illegal response
    response: drop_record
-
  fname: pmhcf
  sqltype: char
  varlab: Cystic fibrosis
  talias: {idpatient: pmhcf}
  valias: *value_pmh
  vallab: *label_pmh
  checks:
  -
    type: legal_vals
    value: [N,P,I]
    msg: Illegal response
    response: drop_record
-
  fname: pmhfib
  sqltype: char
  varlab: Fibrotic lung disease
  talias: {idpatient: pmhfib}
  valias: *value_pmh
  vallab: *label_pmh
  checks:
  -
    type: legal_vals
    value: [N,P,I]
    msg: Illegal response
    response: drop_record

-
  fname: adlbath
  sqltype: char
  varlab: Bathing or showering
  talias: {idpatient: adlbath}
  valias: &value_adl
    A: 0
    N: 1
    J: 2
    T: 3
  vallab: &label_adl
    1: Able
    2: Minor assistance
    3: Major assistance
    4: Total dependence
  checks:
  -
    type: legal_vals
    value: [A,N,J,T]
    msg: Illegal response
    response: drop_record
-
  fname: adlshop
  sqltype: char
  varlab: Shopping
  talias: {idpatient: adlshop}
  valias: *value_adl
  vallab: *label_adl
  checks:
  -
    type: legal_vals
    value: [A,N,J,T]
    msg: Illegal response
    response: drop_record
-
  fname: adlmoney
  sqltype: char
  varlab: Money management
  talias: {idpatient: adlmoney}
  valias: *value_adl
  vallab: *label_adl
  checks:
  -
    type: legal_vals
    value: [A,N,J,T]
    msg: Illegal response
    response: drop_record
-
  fname: adltrans
  sqltype: char
  varlab: Transfers
  talias: {idpatient: adltrans}
  valias: *value_adl
  vallab: *label_adl
  checks:
  -
    type: legal_vals
    value: [A,N,J,T]
    msg: Illegal response
    response: drop_record
-
  fname: adlhouse
  sqltype: char
  varlab: Light housework
  talias: {idpatient: adlhouse}
  valias: *value_adl
  vallab: *label_adl
  checks:
  -
    type: legal_vals
    value: [A,N,J,T]
    msg: Illegal response
    response: drop_record
-
  fname: lrti_micro
  sqltype: tinyint
  varlab: Microbiological diagnosis
  talias: {idpatient: diagmicro}
  vallab:
    1: Streptococcus pneumoniae
    2: Staphylococcus aureus
    3: Mycoplasma pneumoniae
    4: Haemophilus spp
    5: Klebsiella pneumoniae
    6: Chlamydia spp
    7: Legionella spp
    8: Pseudomonas aeruginosa
    9: Influenza (Viral)
    10: Other
    11: No positive micro
-
  fname: uvol1h
  derived: True # flag indicates that field is derived from other primary data
  derived_missing_ok: True
  sqltype: smallint
  varlab: Hourly urine volume
  tablerowlabel:
    latex: Urine volume
  unitlabel:
    latex: "mls hr\\textsuperscript{-1}"
  primaryfields:
    - urine_vol
    - urine_period
    - v_timestamp
  code:
    python: |
      if v_timestamp is not None and urine_vol is not None and urine_period is not None:
        if urine_period in [1,2,3]:
            derived_var = urine_vol / {1:1, 2:6, 3:12}[urine_period]
        elif urine_period == 'd' and v_timestamp.hour != 0:
            derived_var = urine_vol / v_timestamp.hour
      else:
          derived_var = None
  notes: Re-written to run with individual values not lists
-
  fname: _valid_row
  metadata: True # flag indicates this is a metadata field
  sqltype: tinyint
  varlab: Row has passed all validation checks
-
  fname: _valid_allfields
  metadata: True # flag indicates this is a metadata field
  sqltype: tinyint
  varlab: All fields have passed all validation checks
-
  fname: _count_missfields
  metadata: True
  sqltype: tinyint
  varlab: Count of missing values in row
-
  fname: _count_unusualfields
  metadata: True
  sqltype: tinyint
  varlab: Count of fields flagged as unusual
-
  fname: _count_impossfields
  metadata: True
  sqltype: tinyint
  varlab: Count of fields flagged as impossible
-
  fname: _list_unusualchks
  metadata: True
  sqltype: text
  varlab: List of unusual checks for this row
-
  fname: _list_imposschks
  metadata: True
  sqltype: text
  varlab: List of impossible checks for this row
-
  fname: lab_date
  sqltype: date
  varlab: Date of laboratory value measurements
  derived: True
  derived_missing_ok: False
  primaryfields: [v_daymonth, cxr_dt]
  code:
    python: |
      yyear = cxr_dt.year
      mmonth_cxr = cxr_dt.month
      mmonth_lab = int(v_daymonth[2:])
      dday = int(v_daymonth[:2])
      if mmonth_cxr != 12:
        derived_var = datetime.datetime(yyear, mmonth_lab, dday)
      elif mmonth_cxr == 12 and mmonth_lab == 12:
        derived_var = datetime.datetime(yyear, mmonth_lab, dday)
      elif mmonth_cxr == 12 and mmonth_lab == 1:
        derived_var = datetime.datetime(yyear + 1, mmonth_lab, dday)
      elif mmonth_cxr == 12 and mmonth_lab == 11:
        derived_var = datetime.datetime(yyear - 1, mmonth_lab, dday)
      else:
        derived_var = None
-
  fname: mort_hosp
  sqltype: tinyint
  sqllen: 16
  varlab: Hospital mortality
  valias:
    died: 1
    alive: 0
  vallab: *label_truefalse
  talias:
    mortality_uclh: mort_hosp
-
  fname: c3a
  sqltype: float
  varlab: Complement C3a
  units: ng / ml
-
  fname: c5a
  sqltype: float
  varlab: Complement C5a
  units: ng / ml
-
  fname: il2
  sqltype: float
  varlab: IL-2
  units:
-
  fname: il4
  sqltype: float
  varlab: IL-4
  units:
-
  fname: il6
  sqltype: float
  varlab: IL-6
  units:
-
  fname: il10
  sqltype: float
  varlab: IL-10
  units:
-
  fname: tnf
  sqltype: float
  varlab: TNF
  units:
-
  fname: il17a
  sqltype: float
  varlab: IL-17a
  units:
-
  fname: ifn
  sqltype: float
  varlab: Interferon gamma
  units:
-
  fname: sampleno
  sqltype: tinyint
  varlab: (SPOT)id sample number
-
  fname: id_jp
  sqltype: char
  sqllen: 16
  varlab: John-Paul's (SPOT)id key
-
  fname: id_worry
  sqltype: tinyint
  varlab: Flag to indicate if JP has reported concern with sample identification
-
  fname: id_immunoglobulin
  sqltype: char
  sqllen: 16
  varlab: Manu's Immunoglobulin ID code
-
  fname: igg
  sqltype: float
  varlab: IgG
  units: g/l
-
  fname: iga
  sqltype: float
  varlab: IgA
  units: g/l
-
  fname: igm
  sqltype: float
  varlab: IgM
  units: g/l
-
  fname: igkf
  sqltype: float
  varlab: KF
  units: mg/l
-
  fname: iglf
  sqltype: float
  varlab: LF
  units: mg/l
-
  fname: excel_row
  sqltype: smallint
  varlab: row number of excel sheet from where data originally imported
-
  fname: excel_sheet
  sqltype: char
  sqllen: 64
  varlab: excel sheet name from where data originally imported
-
  fname: patient_createdat
  sqltype: timestamp
  varlab: general purpose timestamp
  notes: |
    Used to index records in (SPOT)id in combination with sitename
-
  fname: modifiedat
  sqltype: timestamp
  varlab: general purpose timestamp
-
  fname: sourceFile
  sqltype: char
  sqllen: 255
  varlab: name of original source file
-
  fname: sourceFileTimeStamp
  sqltype: timestamp
  varlab: last modification timestamp of source file
-
  fname: sampletimestamp
  sqltype: timestamp
  varlab: date and time of UCLH sample
-
  fname: study_day
  sqltype: smallint
  varlab: time difference in days between this day and day zero
  units: days
-
  fname: sample_delta
  sqltype: smallint
  varlab: time difference in hours between this sample and the first
  units: hours
-
  fname: sample_sequence
  sqltype: tinyint
  varlab: sequence according to timestamp
-
  fname: v_ccmds_reported
  sqltype: tinyint
  varlab: Level of care reported on assessment
  valias: *value_ccmds
  vallab: *label_ccmds
-
  fname: vitals_reported
  sqltype: tinyint
  varlab: Core vital signs reported on daily assessment
  notes: any of hrate, bpsys, spo2, temp reported
-
  fname: fbc_reported
  sqltype: tinyint
  varlab: FBC reported on daily assessment
-
  fname: ue_reported
  sqltype: tinyint
  varlab: U and E reported on daily assessment
-
  fname: tab_serial
  sqltype: int
  varlab: unique row number from source table
-
  fname: idpatient_crf_found
  sqltype: tinyint
  varlab: Initial assessment available for (SPOT)id patient
  vallab: *label_truefalse
-
  fname: idvisit_crf_count
  sqltype: tinyint
  varlab: Number of assessments available for (SPOT)id patient
-
  fname: ews_true
  sqltype: tinyint
  varlab: Early warning score in use
  valias: *value_yesno
  vallab: *label_truefalse
-
  fname: ews_hr
  sqltype: tinyint
  varlab: EWS includes heart rate
  vallab: *label_truefalse
-
  fname: ews_bp
  sqltype: tinyint
  varlab: EWS includes blood pressure
  vallab: *label_truefalse
-
  fname: ews_spo2
  sqltype: tinyint
  varlab: EWS includes oxygen saturations
  vallab: *label_truefalse
-
  fname: ews_rr
  sqltype: tinyint
  varlab: EWS includes respiratory rate
  vallab: *label_truefalse
-
  fname: ews_gcs
  sqltype: tinyint
  varlab: EWS includes consciousness
  vallab: *label_truefalse
-
  fname: ews_uvol
  sqltype: tinyint
  varlab: EWS includes urine output
  vallab: *label_truefalse
-
  fname: ews_pain
  sqltype: tinyint
  varlab: EWS includes pain
  vallab: *label_truefalse
-
  fname: ews_other
  sqltype: tinyint
  varlab: EWS includes other variables
  vallab: *label_truefalse
-
  fname: ews_trigger
  sqltype: tinyint
  varlab: EWS scoring
  valias:
    'either of the above': 0
    'a single parameter threshold': 1
    'a composite score': 2
  vallab:
    0: 'either'
    1: 'single parameter'
    2: ' composite score'
-
  fname: ews_electronic
  sqltype: tinyint
  varlab: EWS collected electronically
  valias: *value_yesno
  vallab: *label_truefalse
-
  fname: admit_without_review
  sqltype: char
  sqllen: 16
  varlab: ICU admissions seen without review
-
  fname: units_incmp
  sqltype: tinyint
  varlab: Number of CMP units
-
  fname: units_notincmp
  sqltype: tinyint
  varlab: Number of non-CMP units
-
  fname: units_notincmp_l3
  sqltype: tinyint
  varlab: Number of non-CMP units with L3 beds
-
  fname: units_incmp_rrt
  sqltype: tinyint
  varlab: Flag if CMP unit can provide RRT
  vallab: *label_truefalse
-
  fname: country
  sqltype: char
  sqllen: 64
  varlab: Country of residence
-
  fname: possible_duplicate
  sqltype: tinyint
  varlab: possible duplicate record
-
  fname: filled_fields_count
  sqltype: smallint
  varlab: completed fields out of 48 - spotlight
  notes: |
    - Out of a theoretical maximum of 48
-
  fname: match_is_ok
  sqltype: tinyint
  varlab: flag if match found for record
-
  fname: response_tails
  sqltype: char
  sqllen: 3
  varlab: tails report response code
  vallab:
    1: 'Patient not eligible'
    1a: 'Readmission for the same illness (i.e. failed discharge)'
    1b: 'No bedside assessment by critical care team prior to admission'
    1c: 'Patient admitted from A and E'
    1d: 'Elective admission'
    1f: 'Transient ward admission pending ICU bed (typically to MAU, recovery)'
    1g: 'Direct admission from theatre with no ward review'
    2: 'Patient data for (SPOT)light missing and unobtainable'
    3: 'Patient data for CMP missing and unobtainable'
    4: 'Please re-match- Patient data updated for (SPOT)light'
    5: 'Match failed because of error in CMP data- see note'
    6: 'Match failed because of errors in CMP and (SPOT)light data'
    7: 'Match/visit/illness episode confirmed with no changes'
    8: 'Other- see note'
    9: 'Matched to correct patient?'
    9a: 'Matched to correct patient but Incorrect visit time'
    9b: 'Matched to incorrect patient'
    10: 'Alternative match proposed'
-
  fname: response_tails_note
  sqltype: char
  sqllen: 255
  varlab: tails report response note
-
  fname: response_heads
  sqltype: char
  sqllen: 3
-
  fname: response_heads_note
  sqltype: char
  sqllen: 255
  varlab: heads report response note
-
  fname: vdelay
  sqltype: smallint
  varlab: Referral delay
  units: hours
  definition: |
    - delay is defined as a subjective estimate, in hours, of the time between the visit and the earliest moment when a visit would have been warranted
  source: spotlight
-
  fname: dead
  sqltype: tinyint
  varlab: MRIS reported death
  vallab: *label_truefalse
-
  fname: date_trace
  sqltype: date
  varlab: MRIS trace date
  talias: {headsfinal: date_event}
-
  fname: icnno
  sqltype: char
  sqllen: 3
  varlab: ICNARC unique unit id
-
  fname: matchtype
  sqltype: char
  sqllen: 3
  varlab: Heads and tails match result
  vallab:
    'A': 'Complete'
    'A1': 'Complete - alternative adno proposed'
    'A2': 'Complete - alternative v_date proposed'
    'A3': 'Complete - correction proposed'
    'B1': 'Presumed (but no CMP number)'
    'B2': 'Presumed (but no NHS number)'
    'B3': 'Presumed (but no postcode)'
    'B4': 'Presumed - confirmed with error < 2'
    'C1': 'Possible (identical NHS numbers)'
    'C2': 'Possible (identical DoB)'
    'C3': 'Possible (identical postcodes)'
    'C4': 'Possible transfer (identical NHS numbers)'
    'C5': 'Possible transfer (identical DoB)'
    'D': 'Possible (but ICU admission > 1 wk later)'
    'E': 'Possible (but ward visit AFTER ICU admission)'
-
  fname: elgage
  sqltype: tinyint
  varlab: spotlight inclusion by age
  notes: Age > 18 years
-
  fname: elgcpr
  sqltype: tinyint
  varlab: spotlight inclusion - no CPR pre-admission
-
  fname: elgemx
  sqltype: tinyint
  varlab: spotlight inclusion - emergency admission
-
  fname: elgfirst
  sqltype: tinyint
  varlab: spotlight inclusion - new admission
  notes: Not a re-admission within the same hospital stay
-
  fname: elgward
  sqltype: tinyint
  varlab: spotlight inclusion - ward within same hospital
-
  fname: elgoward
  sqltype: tinyint
  varlab: 'spotlight inclusion - ward, HDU or obstetrics within same hospital'
-
  fname: elgtrans
  sqltype: tinyint
  varlab: spotlight inclusion - transient ward-like area
  notes: 'imaging, recovery or specialist area within same hospital'
-
  fname: elgthtr
  sqltype: tinyint
  varlab: spotlight inclusion - ward admission via theatre
-
  fname: elghdu
  sqltype: tinyint
  varlab: spotlight inclusion - ward admission via non-CMP HDU area
-
  fname: elgreport_first
  sqltype: tinyint
  varlab: spotlight inclusion - tails report indicated first admission
-
  fname: elgfirst_episode
  sqltype: tinyint
  varlab: First illness episode
  notes: Flag to pick out first episode if multiple reported
-
  fname: elgCore
  sqltype: tinyint
  varlab: Direct ward to ICU admission
  vallab: *label_truefalse
  notes: "Age > 18, No CPR, Unplanned admission directly from ward"
-
  fname: elgMore
  sqltype: tinyint
  varlab: Direct extended ward to ICU admission
  vallab: *label_truefalse
  notes: "Age > 18, No CPR, Unplanned admission directly from ward, HDU or other area"
-
  fname: elgAll
  sqltype: tinyint
  varlab: Direct extended ward to ICU admission
  vallab: *label_truefalse
  notes: "Age > 18, No CPR, Unplanned admission from ward via any route"
-
  fname: elgdate
  sqltype: tinyint
  varlab: Eligible by date - spotlight
  vallab: *label_truefalse
-
  fname: elgreport_heads
  sqltype: tinyint
  varlab: Eligible by heads report - spotlight
  vallab: *label_truefalse
-
  fname: elgreport_tails
  sqltype: tinyint
  varlab: Eligible by tails report - spotlight
  vallab: *label_truefalse
-
  fname: elgprotocol
  sqltype: tinyint
  varlab: Eligible by protocol violations - spotlight
  notes: Excludes admissions when site not following protocol (i.e. CCOT only etc)
  vallab: *label_truefalse
-
  fname: daicu
  sqltype: date
  varlab: Date of admission to ICU
-
  fname: taicu
  sqltype: time
  varlab: Time of admission to ICU
-
  fname: cpr_v3
  sqltype: char
  sqllen: 1
  varlab: CPR within 24h of unit admission
  vallab:
    H: in-hospital CPR
    C: community CPR
    N: No CPR
  source: CMPD
-
  fname: loca
  sqltype: char
  sqllen: 1
  source: CMPD
  varlab: location directly prior to admission
  vallab: &label_cmpd_locations
    W: Ward
    B: obstetrics area
    M: other intermediate area
    P: paediatric critical care
    I: level 3 bed in adult ICU
    H: level 2 bed in adult HDU
    U: adult HDU
    T: Theatre or recovery
    E: accident and emergency
    R: recovery only
    G: imaging department
    S: specialist treatment area
    C: clinic
    N: not in hospital
  notes: |
    - specialist treatment area: endoscopy, cath lab etc
-
  fname: ploca
  sqltype: char
  sqllen: 1
  source: CMPD
  varlab: location indirectly prior to admission
  vallab: *label_cmpd_locations
  notes: |
    where the location directly prior to admission is a transient area
-
  fname: hloca
  sqltype: char
  sqllen: 1
  source: CMPD
  varlab: hospital housing non-transient location in
  vallab: &label_cmpd_hospital
    S: same hospital
    A: other acute hospital
    O: non-acute hospital
-
  fname: htloca
  sqltype: char
  sqllen: 1
  source: CMPD
  varlab: hospital housing transient location in
  vallab: *label_cmpd_hospital
-
  fname: classns
  sqltype: char
  sqllen: 1
  varlab: CMPD surgical classification
  source: CMPD
  vallab:
    M: emergency
    U: urgent
    S: scheduled
    L: elective
-
  fname: tuidi
  sqltype: smallint
  source: CMPD
  varlab: transferring unit identifier in
-
  fname: typeiha
  sqltype: char
  sqllen: 1
  source: CMPD
  varlab: type of adult ICU/HDU in
  vallab: &label_cmpd_unit_type
    g: general
    c: cardiac
    t: thoracic
    l: liver
    s: spinal injury
    b: burns and plastics
    r: renal
    n: neurosciences
    m: medical
    u: surgical
    o: obstetric
-
  fname: pa_v3
  sqltype: char
  sqllen: 1
  source: CMPD
  varlab: Critical care admission type
  vallab:
    L: unplanned local admission
    U: unplanned transfer in
    P: planned transfer in
    S: planned local surgical admission
    M: planned local medical admission
    R: repatriation
-
  fname: status
  sqltype: tinyint
  source: CMPD
  varlab: CMPD data status
  valias: {New: 0, Dirty: 1, Validation: 2, Deactivated: 3, Clean: 4}
  vallab:
    0: New
    1: Dirty
    2: Validation
    3: Deactivated
    4: Clean
-
  fname: withinsh
  sqltype: tinyint
  source: CMPD
  varlab: CMPD re-admission within same hospital stay
  vallab: *label_truefalse
-
  fname: yusurv
  sqltype: tinyint
  source: CMPD
  varlab: CMPD unit survival
  vallab: *label_truefalse
-
  fname: yhsurv
  sqltype: tinyint
  source: CMPD
  varlab: CMPD hospital survival
  vallab: *label_truefalse
-
  fname: ahsurv
  sqltype: tinyint
  source: CMPD
  varlab: CMPD ultimate hospital survival
  tablerowlabel:
    latex: "Hospital mortality"
  vallab: &label_deadalive
    0: Alive
    1: Dead
-
  fname: yulos
  sqltype: float
  source: CMPD
  varlab: CMPD unit length of stay
  units: hours
  stataformat: "%9.0fc"
  tablerowlabel:
    latex: "ICU length of stay"
  unitlabel:
    latex: hours
-
  fname: yulosd
  sqltype: float
  source: CMPD
  varlab: CMPD unit length of stay
  stataformat: "%9.1fc"
  tablerowlabel:
    latex: "ICU length of stay"
  unitlabel:
    latex: days
-
  fname: yhlos
  sqltype: smallint
  source: CMPD
  varlab: CMPD hospital length of stay
  units: days
-
  fname: yhlosa
  sqltype: smallint
  source: CMPD
  varlab: CMPD hospital length of stay after ICU discharge
  units: days
-
  fname: yhlosb
  sqltype: smallint
  source: CMPD
  varlab: CMPD hospital length of stay before ICU admission
  units: days
-
  fname: idunit
  sqltype: char
  sqllen: 12
  varlab: unique identifier for non-CMP units in spotlight
-
  fname: dropflag
  sqltype: tinyint
  varlab: spotlight flag - unit to be dropped from analysis
  vallab: *label_truefalse
-
  fname: cmptrue
  sqltype: tinyint
  varlab: spotlight flag - unit in CMP
  vallab: *label_truefalse
-
  fname: spottrue
  sqltype: tinyint
  varlab: spotlight flag - unit in spotlight
  vallab: *label_truefalse
-
  fname: date_cmp_start
  sqltype: date
  varlab: spotlight - date CMP data available from
-
  fname: date_cmp_finish
  sqltype: date
  varlab: spotlight - date CMP data available until
-
  fname: match_quality_by_month
  sqltype: tinyint
  varlab: percent of eligible admissions matched
-
  fname: match_quality_by_site
  sqltype: float
  varlab: percent of eligible admissions matched for the site
-
  fname: unit_name
  sqltype: char
  sqllen: 64
  varlab: unit name
  talias: {tailsmini: icuname}
-
  fname: unit_type
  sqltype: char
  sqllen: 12
  varlab: unit type
  source: CMPD
-
  fname: heads_count
  sqltype: smallint
  varllab: Number of heads (visits)
-
  fname: studydays
  sqltype: smallint
  varlab: Number of study days
-
  fname: heads_tailed
  sqltype: tinyint
  varlab: Proportion of visits matched
  units: percent
-
  fname: tails_core_percent
  sqltype: tinyint
  varlab: Emergency ward admissions to CMPD - core
  units: percent
-
  fname: tails_core_umortality
  sqltype: tinyint
  varlab: Proportion of ward admissions dying in ICU - core
  units: percent
-
  fname: tails_core_hmortality
  sqltype: tinyint
  varlab: Proportion of ward admissions dying in hospital - core
  units: percent
-
  fname: tails_all_percent
  sqltype: tinyint
  varlab: Emergency ward admissions to CMPD - all
  units: percent
-
  fname: tails_all_umortality
  sqltype: tinyint
  varlab: Proportion of ward admissions dying in ICU - all
  units: percent
-
  fname: tails_all_hmortality
  sqltype: tinyint
  varlab: Proportion of ward admissions dying in hospital - all
  units: percent

-
  fname: tails_wardemx_delayed
  sqltype: tinyint
  varlab: Proportion of ward admissions reported delayed
  units: percent
-
  fname: tails_othercc
  sqltype: tinyint
  varlab: Proportion of ward admissions via another Crit Care
  units: percent
-
  fname: cmpd_start_miss
  sqltype: tinyint
  varlab: Flag if CMPD data unavailable at study start
  vallab: *label_truefalse
-
  fname: cmpd_end_miss
  sqltype: tinyint
  varlab: Flag if CMPD data unavailable at study end
  vallab: *label_truefalse
-
  fname: cmpd_month_miss
  sqltype: tinyint
  varlab: Flag if CMPD data unavailable this month
  vallab: *label_truefalse
-
  fname: site_in_early
  sqltype: tinyint
  varlab: flag - site in e vs d analysis
  vallab: *label_truefalse
-
  fname: news_score
  sqltype: tinyint
  varlab: National Early Warning Score
  tablerowlabel:
    latex: NEWS score
  stataformat: "%9.1fc"
  derived: True
  derived_missing_ok: True
  primaryfields: [hrate, bpsys, spo2, rxfio2, temperature, rrate, avpu, gcst]
  code:
    python: |
      # CHANGED: 2013-02-08 - since rxfio2 is now an integer code
      rxfio2_dict = {0:'r', 1:'w', 2:'v', 3:'b', 4:'c', 5:'n', 6:'p', 7:'o'}
      if rxfio2 in rxfio2_dict:
        rxfio2 = rxfio2_dict[rxfio2]
      else:
        rxfio2 = ''
      derived_var = 0
      # Respiratory rate
      if rrate is None:
        pass
      elif rrate <= 8 or rrate >= 25:
        derived_var += 3
      elif rrate <= 11:
        derived_var += 1
      elif rrate >= 21:
        derived_var += 2
      # SpO2
      if spo2 is None:
        pass
      elif spo2 <= 91:
        derived_var += 3
      elif spo2 <= 93 and rxfio2 != 'r' and rxfio2 is not None:
        derived_var += 2
      elif spo2 <= 95:
        derived_var += 1
      # Supplemental oxygen use
      if rxfio2 != 'r' and rxfio2 is not None:
        derived_var += 2
      # Temperature
      if temperature is None:
        pass
      elif temperature <= 35:
        derived_var += 3
      elif temperature <= 36.0:
        derived_var += 1
      elif temperature >= 39.1:
        derived_var += 2
      elif temperature >= 38.1:
        derived_var += 1
      # Systolic blood pressure
      if bpsys is None:
        pass
      elif bpsys <= 90:
        derived_var += 3
      elif bpsys <= 100:
        derived_var += 2
      elif bpsys <= 110:
        derived_var += 1
      elif bpsys >= 220:
        derived_var += 3
      # Heart rate
      if hrate is None:
        pass
      elif hrate <= 40:
        derived_var += 3
      elif hrate <= 50:
        derived_var += 1
      elif hrate >= 131:
        derived_var += 3
      elif hrate >= 111:
        derived_var += 2
      elif hrate >= 91:
        derived_var += 1
      # consciousness (AVPU / GCS)
      if avpu is None:
        pass
      elif avpu in list('vpu'):
        derived_var += 3
      elif gcst <= 13 and gcst is not None:
        derived_var += 3
-
  fname: news_risk
  sqltype: tinyint
  varlab: NEWS risk category
  derived: True
  derived_missing_ok: True
  primaryfields: [hrate, bpsys, spo2, rxfio2, temperature, rrate, avpu, gcst]
  code:
    python: |
      # CHANGED: 2013-02-08 - since rxfio2 is now an integer code
      rxfio2_dict = {0:'r', 1:'w', 2:'v', 3:'b', 4:'c', 5:'n', 6:'p', 7:'o'}
      if rxfio2 in rxfio2_dict:
        rxfio2 = rxfio2_dict[rxfio2]
      else:
        rxfio2 = ''
      news_score = 0
      news_red = False
      # Respiratory rate
      if rrate is None:
        pass
      elif rrate <= 8 or rrate >= 25:
        news_score += 3
        news_red = True
      elif rrate <= 11:
        news_score += 1
      elif rrate >= 21:
        news_score += 2
      # SpO2
      if spo2 is None:
        pass
      elif spo2 <= 91:
        news_score += 3
        news_red = True
      elif spo2 <= 93 and rxfio2 != 'r' and rxfio2 is not None:
        news_score += 2
      elif spo2 <= 95:
        news_score += 1
      # Supplemental oxygen use
      if rxfio2 != 'r' and rxfio2 is not None:
        news_score += 2
      # Temperature
      if temperature is None:
        pass
      elif temperature <= 35:
        news_score += 3
        news_red = True
      elif temperature <= 36.0:
        news_score += 1
      elif temperature >= 39.1:
        news_score += 2
      elif temperature >= 38.1:
        news_score += 1
      # Systolic blood pressure
      if bpsys is None:
        pass
      elif bpsys <= 90:
        news_score += 3
        news_red = True
      elif bpsys <= 100:
        news_score += 2
      elif bpsys <= 110:
        news_score += 1
      elif bpsys >= 220:
        news_score += 3
        news_red = True
      # Heart rate
      if hrate is None:
        pass
      elif hrate <= 40:
        news_score += 3
        news_red = True
      elif hrate <= 50:
        news_score += 1
      elif hrate >= 131:
        news_score += 3
        news_red = True
      elif hrate >= 111:
        news_score += 2
      elif hrate >= 91:
        news_score += 1
      # consciousness (AVPU / GCS)
      if avpu is not None:
        pass
      elif avpu in list('vpu'):
        news_score += 3
        news_red = True
      elif gcst <= 13 and gcst is not None:
        news_score += 3
        news_red = True
      # now calculated news risk class
      if news_score >= 7:
        derived_var = 3
      elif news_score >= 5 or news_red == True:
        derived_var = 2
      elif news_score > 0 and news_red == False:
        derived_var = 1
      elif news_score == 0 and news_red == False:
        derived_var = 0
      else:
        derived_var = None
  vallab:
    0: Lowest
    1: Low
    2: Medium
    3: High
-
  fname: icnarc_score
  sqltype: tinyint
  varlab: ICNARC acute physiology score
  derived: True
  derived_missing_ok: True
  primaryfields:
    - hrate
    - bpsys
    - temperature
    - rrate
    - pao2
    - abgfio2
    - rxfio2
    - ph
    - urea
    - creatinine
    - sodium
    - urine_vol
    - urine_period
    - v_timestamp
    - wcc
    - gcst
  code:
    python: |
      # CHANGED: 2013-02-08 - since rxfio2 is now an integer code
      rxfio2_dict = {0:'r', 1:'w', 2:'v', 3:'b', 4:'c', 5:'n', 6:'p', 7:'o'}
      if rxfio2 in rxfio2_dict:
        rxfio2 = rxfio2_dict[rxfio2]
      else:
        rxfio2 = ''
      # derive intermediate vars uvol24 and pf
      if urine_period is not None and v_timestamp is not None and urine_vol is not None:
        if urine_period in [1, 2, 3]:
            uvol24 = urine_vol / {1:1,2:6, 3:12}[urine_period] * 24
        elif urine_period == 4 and v_timestamp.hour != 0:
            uvol24 = urine_vol / v_timestamp.hour * 24
      else:
          uvol24 = None
      if (pao2 is not None) and (abgfio2 is not None):
          # ensure that one var is float else get integer division in python 2.x
          pf = round(float(pao2) * 7.6 / abgfio2 * 100)
      else:
          pf = None
      i = 0
      # heart rate
      if hrate is None:
        pass
      elif hrate <= 39:
        i += 14
      elif hrate >= 140:
        i += 3
      elif hrate >= 120:
        i += 2
      elif hrate >= 110:
        i += 1
      # systolic bp
      if bpsys is None:
        pass
      elif bpsys <= 49:
        i += 15
      elif bpsys <=59:
        i += 9
      elif bpsys <=69:
        i += 6
      elif bpsys <= 79:
        i += 4
      elif bpsys <= 99:
        i += 2
      elif bpsys >= 220:
        i += 16
      elif bpsys >= 180:
        i += 7
      # temperature
      if temperature is None:
        pass
      elif temperature <= 33.9:
        i += 12
      elif temperature <= 35.9:
        i += 7
      elif temperature <= 38.4:
        i += 1
      elif temperature >= 41:
        i += 5
      # respiratory rate
      if rrate is None:
        pass
      elif rrate <= 5:
        i += 1
      elif rrate >= 25:
        i += 5
      elif rrate >= 14:
        i += 2
      elif rrate >= 12:
        i += 1
      # p:f ratio
      if pf is None:
        pass
      elif pf <= 99 and rxfio2 not in list('cnp'):
        i += 6
      elif pf <= 199 and rxfio2 not in list('cnp'):
        i += 3
      elif pf <= 99 and rxfio2 in list('cnp'):
        i += 8
      elif pf <= 199 and rxfio2 in list('cnp'):
        i += 5
      elif pf >= 200 and rxfio2 in list('cnp'):
        i += 3
      # pH
      if ph is None:
        pass
      elif ph <= 7.14:
        i += 4
      elif ph <= 7.24:
        i += 2
      elif ph >= 7.5:
        i += 4
      elif ph >= 7.33:
        i += 1
      # urea
      if urea is None:
        pass
      elif urea >= 14.4:
        i += 5
      elif urea >= 7.2:
        i += 3
      elif urea >= 6.2:
        i += 1
      # creatinine
      if creatinine is None:
        pass
      elif creatinine > 1.5 * 88.4:
        i += 4
      elif creatinine > 0.6 * 88.4:
        i += 2
      # sodium
      if sodium is None:
        pass
      elif sodium <= 129:
        i += 4
      elif sodium >= 160:
        i += 8
      elif sodium >= 155:
        i += 7
      elif sodium >= 150:
        i += 4
      # urine volume
      if uvol24 is None:
        pass
      elif uvol24 <= 399:
        i += 7
      elif uvol24 <= 599:
        i += 6
      elif uvol24 <= 899:
        i += 5
      elif uvol24 <= 1499:
        i += 3
      elif uvol24 <= 1999:
        i += 1
      # white cell count
      if wcc is None:
        pass
      elif wcc <= 0.9:
        i += 6
      elif wcc <= 2.9:
        i += 3
      elif wcc >= 40:
        i += 4
      elif wcc >= 15:
        i += 2
      # gcs
      if gcst is None:
        pass
      elif gcst <= 3:
        i += 11
      elif gcst <=4:
        i += 9
      elif gcst <= 5:
        i += 6
      elif gcst <= 6:
        i += 4
      elif gcst <= 13:
        i += 2
      elif gcst <= 14:
        i += 1
      derived_var = i
-
  fname: age
  sqltype: float
  varlab: Age
  tablerowlabel:
    latex: Age
  unitlabel:
    latex: yrs
  stataformat: "%9.1fc"
  units: years
  notes: needs to be derived in SQL table (avoids specifying whether date or timestamp based)
  checks:
  -
    type: min
    value: 18.0
    msg: Below minimum value
    response: drop_record
-
  fname: fio2_std
  sqltype: tinyint
  varlab: FiO2 standardised
  tablerowlabel:
    latex: "FiO\\textsubscript{2}"
  unitlabel:
    latex: "\\%"
  derived: True
  derived_missing_ok: True
  primaryfields: [rxfio2, fio2u, fio2]
  code:
    python: |
      # CHANGED: 2013-02-08 - since rxfio2 is now an integer code
      rxfio2_dict = {0:'r', 1:'w', 2:'v', 3:'b', 4:'c', 5:'n', 6:'p', 7:'o'}
      if rxfio2 in rxfio2_dict:
          rxfio2 = rxfio2_dict[rxfio2]
      else:
          rxfio2 = ''
      # FiO2 standardised
      fio2_std = None
      if rxfio2 == 'r':
          fio2_std = 21
      elif rxfio2 == 'v':
          fio2_std = fio2
      elif rxfio2 in list('cnpo') and fio2u == 'p':
          fio2_std = fio2
      # Now treat CPAP, NIV, IPPV like reservoir bag
      elif rxfio2 in list('cbnp') and fio2u == 'l':
          if fio2 >= 10:
              fio2_std = 90
          elif fio2 >= 9:
              fio2_std = 85
          elif fio2 >= 8:
              fio2_std = 80
          elif fio2 >= 7:
              fio2_std = 70
          elif fio2 >= 6:
              fio2_std = 60
          else:
              fio2_std = 50
      elif rxfio2 == 'w':
          if fio2 >= 8:
              fio2_std = 50
          elif fio2 >= 7:
              fio2_std = 45
          elif fio2 >= 6:
              fio2_std = 40
          elif fio2 >= 5:
              fio2_std = 35
          elif fio2 >= 4:
            fio2_std = 30
          elif fio2 >= 3:
            fio2_std = 27
          elif fio2 >= 2:
            fio2_std = 25
          else:
            fio2_std = 21
      derived_var = fio2_std
-
  fname: pf_ratio
  sqltype: float
  units: mmHg
  varlab: PF ratio
  derived: True
  derived_missing_ok: True
  primaryfields: [pao2, abgfio2, rxfio2, fio2u, fio2]
  code:
    python: |
      # CHANGED: 2013-02-08 - since rxfio2 is now an integer code
      rxfio2_dict = {0:'r', 1:'w', 2:'v', 3:'b', 4:'c', 5:'n', 6:'p', 7:'o'}
      if rxfio2 in rxfio2_dict:
        rxfio2 = rxfio2_dict[rxfio2]
      else:
        rxfio2 = ''
      # ensure that one var is float else get integer division in python 2.x
      result = None
      if abgfio2 != None and pao2 != None:
        result = round(float(pao2) * 7.6 / abgfio2 * 100)
      if pao2 != None and rxfio2 != None and fio2u != None and fio2 != None:
        # FiO2 standardised
        fio2_std = None
        if rxfio2 == 'r':
            fio2_std = 21
        elif rxfio2 == 'v':
            fio2_std = fio2
        elif rxfio2 in list('cnpo') and fio2u == 'p':
            fio2_std = fio2
        # Now treat CPAP, NIV, IPPV like reservoir bag
        elif rxfio2 in list('cbnp') and fio2u == 'l':
            if fio2 >= 10:
                fio2_std = 90
            elif fio2 >= 9:
                fio2_std = 85
            elif fio2 >= 8:
                fio2_std = 80
            elif fio2 >= 7:
                fio2_std = 70
            elif fio2 >= 6:
                fio2_std = 60
            else:
                fio2_std = 50
        elif rxfio2 == 'w':
            if fio2 >= 8:
                fio2_std = 50
            elif fio2 >= 7:
                fio2_std = 45
            elif fio2 >= 6:
                fio2_std = 40
            elif fio2 >= 5:
                fio2_std = 35
            elif fio2 >= 4:
              fio2_std = 30
            elif fio2 >= 3:
              fio2_std = 27
            elif fio2 >= 2:
              fio2_std = 25
            else:
              fio2_std = 21
            result = round((float(pao2) * 7.6) / fio2_std * 100)
      derived_var = result
  notes: |
    - NOTE: 2012-12-14 - adapted to work with (SPOT)id data too
-
  fname: pf
  stataformat: "%9.1f"
  tablerowlabel:
    latex: "P:F ratio"
  unitlabel:
    latex: kPa
-
  fname: sf_ratio
  sqltype: float
  varlab: SF ratio
  derived: True
  derived_missing_ok: True
  primaryfields: [spo2, rxfio2, fio2u, fio2]
  code:
    python: |
      # CHANGED: 2013-02-08 - since rxfio2 is now an integer code
      rxfio2_dict = {0:'r', 1:'w', 2:'v', 3:'b', 4:'c', 5:'n', 6:'p', 7:'o'}
      if rxfio2 in rxfio2_dict:
        rxfio2 = rxfio2_dict[rxfio2]
      else:
        rxfio2 = ''
      # FiO2 standardised
      fio2_std = None
      if rxfio2 == 'r':
          fio2_std = 21
      elif rxfio2 == 'v':
          fio2_std = fio2
      elif rxfio2 in list('cnpo') and fio2u == 'p':
          fio2_std = fio2
      # Now treat CPAP, NIV, IPPV like reservoir bag
      elif rxfio2 in list('cbnp') and fio2u == 'l':
          if fio2 >= 10:
              fio2_std = 90
          elif fio2 >= 9:
              fio2_std = 85
          elif fio2 >= 8:
              fio2_std = 80
          elif fio2 >= 7:
              fio2_std = 70
          elif fio2 >= 6:
              fio2_std = 60
          else:
              fio2_std = 50
      elif rxfio2 == 'w':
          if fio2 >= 8:
              fio2_std = 50
          elif fio2 >= 7:
              fio2_std = 45
          elif fio2 >= 6:
              fio2_std = 40
          elif fio2 >= 5:
              fio2_std = 35
          elif fio2 >= 4:
            fio2_std = 30
          elif fio2 >= 3:
            fio2_std = 27
          elif fio2 >= 2:
            fio2_std = 25
          else:
            fio2_std = 21
      # ensure that one var is float else get integer division in python 2.x
      if fio2_std != None and spo2 != None:
        derived_var = round(float(spo2) / fio2_std * 100)
      else:
        derived_var = None
-
  fname: sofa_score
  sqltype: tinyint
  varlab: SOFA score
  derived: True
  derived_missing_ok: True
  tablerowlabel:
    latex: SOFA score
  stataformat: "%9.1fc"
  primaryfields:
    - bpsys
    - bpdia
    - rxcvs_sofa
    - platelets
    - bili
    - pao2
    - abgfio2
    - rxfio2
    - spo2
    - fio2u
    - fio2
    - creatinine
    - urine_vol
    - urine_period
    - v_timestamp
    - gcst
    - avpu
  code:
    python: |
      # CHANGED: 2013-02-08 - since rxfio2 is now an integer code
      rxfio2_dict = {0:'r', 1:'w', 2:'v', 3:'b', 4:'c', 5:'n', 6:'p', 7:'o'}
      if rxfio2 in rxfio2_dict:
        rxfio2 = rxfio2_dict[rxfio2]
      else:
        rxfio2 = ''
      # CHANGED: 2013-02-26 - since rxcvs_sofa is now an integer code
      rxcvs_sofa_dict = {0: 'a', 1:'b', 2:'c', 3:'d', 4:'e', 5:'g'}
      if rxcvs_sofa in rxcvs_sofa_dict:
        rxcvs_sofa = rxcvs_sofa_dict[rxcvs_sofa]
      else:
        rxcvs_sofa = ''
      # derive intermediate vars uvol24 and pf
      # MAP
      if bpsys != None and bpdia != None:
        bpmap = round(bpdia + ((bpsys - bpdia)/3))
      else:
        bpmap = None
      # urine volumer per hour
      if urine_period is not None and v_timestamp is not None and urine_vol is not None:
        if urine_period in ['a', 'b', 'c']:
            uvol24 = urine_vol / {'a':1,'b':6,'c':12}[urine_period] * 24
        elif urine_period == 'd' and v_timestamp.hour != 0:
            uvol24 = urine_vol / v_timestamp.hour * 24
      else:
          uvol24 = None
      # PF ratio
      if (pao2 is not None) and (abgfio2 is not None):
          # ensure that one var is float else get integer division in python 2.x
          pf_ratio = round(float(pao2) * 7.6 / abgfio2 * 100)
      else:
          pf_ratio = None
      # FiO2 standardised
      fio2_std = None
      if rxfio2 == 'r':
          fio2_std = 21
      elif rxfio2 == 'v':
          fio2_std = fio2
      elif rxfio2 in list('cnpo') and fio2u == 'p':
          fio2_std = fio2
      # Now treat CPAP, NIV, IPPV like reservoir bag
      elif rxfio2 in list('cbnp') and fio2u == 'l':
          if fio2 >= 10:
              fio2_std = 90
          elif fio2 >= 9:
              fio2_std = 85
          elif fio2 >= 8:
              fio2_std = 80
          elif fio2 >= 7:
              fio2_std = 70
          elif fio2 >= 6:
              fio2_std = 60
          else:
              fio2_std = 50
      elif rxfio2 == 'w':
          if fio2 >= 8:
              fio2_std = 50
          elif fio2 >= 7:
              fio2_std = 45
          elif fio2 >= 6:
              fio2_std = 40
          elif fio2 >= 5:
              fio2_std = 35
          elif fio2 >= 4:
            fio2_std = 30
          elif fio2 >= 3:
            fio2_std = 27
          elif fio2 >= 2:
            fio2_std = 25
          else:
            fio2_std = 21
      # ensure that one var is float else get integer division in python 2.x
      if fio2_std != None and spo2 != None:
        sf_ratio = round(float(spo2) / fio2_std * 100)
      else:
        sf_ratio = None
      # SOFA respiratory
      sofa_r = 0
      if pf_ratio is not None:
        if pf_ratio < 100 and rxfio2 in list('cnp'):
          sofa_r = 4
        elif pf_ratio < 200 and rxfio2 in list('cnp'):
          sofa_r = 3
        elif pf_ratio < 300:
          sofa_r = 2
        elif pf_ratio < 400:
          sofa_r = 1
      elif sf_ratio is not None:
        if sf_ratio < 115 and rxfio2 in list('cnp'):
          sofa_r = 4
        elif sf_ratio < 240 and rxfio2 in list('cnp'):
          sofa_r = 3
        elif sf_ratio < 370:
          sofa_r = 2
        elif sf_ratio < 440:
          sofa_r =1
      # SOFA Coagulation
      sofa_p = 0
      if platelets is not None:
        if platelets < 20:
          sofa_p = 4
        elif platelets < 50:
          sofa_p = 3
        elif platelets < 100:
          sofa_p = 2
        elif platelets < 150:
          sofa_p = 1
      # SOFA Liver
      sofa_h = 0
      if bili >= 204:
        sofa_h = 4
      elif bili >= 102:
        sofa_h = 3
      elif bili >= 33:
        sofa_h = 2
      elif bili >= 20:
        sofa_h =1
      # SOFA cardiovascular
      sofa_c = 0
      if (bpmap or bpsys) and rxcvs_sofa not in list('cdeg'):
        if bpmap and bpmap < 70:
          sofa_c = 1
        elif bpsys and bpsys < 90:
          sofa_c = 1
      elif rxcvs_sofa in list('cdeg'):
        sofa_c = 2
      # SOFA neuro
      sofa_n = 0
      if gcst:
        if gcst <= 6:
          sofa_n = 4
        elif gcst <= 9:
          sofa_n = 3
        elif gcst <= 12:
          sofa_n = 2
        elif gcst <= 14:
          sofa_n = 1
      elif avpu in list('avpuc'):
        if avpu == 'u':
          sofa_n = 4
        elif avpu == 'p':
          sofa_n = 3
        elif avpu == 'v' or avpu == 'c':
          sofa_n = 1
      # SOFA renal
      sofa_k = 0
      if creatinine > 440 or uvol24 < 200 and uvol24 is not None:
        sofa_k = 4
      elif creatinine > 300 or uvol24 < 500 and uvol24 is not None:
        sofa_k = 3
      elif creatinine > 170:
        sofa_k = 2
      elif creatinine > 109:
        sofa_k = 1
      sofa_t = sofa_k + sofa_n + sofa_r + sofa_c + sofa_h + sofa_p
      derived_var = sofa_t
-
  fname: bpmap
  sqltype: smallint
  unitlabel:
    latex: mmHg
  units: mmHg
  varlab: Mean arterial pressure
  derived: True
  derived_missing_ok: False
  primaryfields: [bpsys, bpdia]
  code:
    python: |
      derived_var = round(bpdia + ((bpsys - bpdia)/3))
-
  fname: sofa_r
  sqltype: tinyint
  varlab: SOFA respiratory
  derived: True
  derived_missing_ok: True
  primaryfields: [pao2, abgfio2, fio2, fio2u, rxfio2, spo2]
  code:
    python: |
      # CHANGED: 2013-02-08 - since rxfio2 is now an integer code
      rxfio2_dict = {0:'r', 1:'w', 2:'v', 3:'b', 4:'c', 5:'n', 6:'p', 7:'o'}
      if rxfio2 in rxfio2_dict:
        rxfio2 = rxfio2_dict[rxfio2]
      else:
        rxfio2 = ''
      # PF ratio
      if (pao2 is not None) and (abgfio2 is not None):
          # ensure that one var is float else get integer division in python 2.x
          pf_ratio = round(float(pao2) * 7.6 / abgfio2 * 100)
      else:
          pf_ratio = None
      # FiO2 standardised
      fio2_std = None
      if rxfio2 == 'r':
          fio2_std = 21
      elif rxfio2 == 'v':
          fio2_std = fio2
      elif rxfio2 in list('cnpo') and fio2u == 'p':
          fio2_std = fio2
      # Now treat CPAP, NIV, IPPV like reservoir bag
      elif rxfio2 in list('cbnp') and fio2u == 'l':
          if fio2 >= 10:
              fio2_std = 90
          elif fio2 >= 9:
              fio2_std = 85
          elif fio2 >= 8:
              fio2_std = 80
          elif fio2 >= 7:
              fio2_std = 70
          elif fio2 >= 6:
              fio2_std = 60
          else:
              fio2_std = 50
      elif rxfio2 == 'w':
          if fio2 >= 8:
              fio2_std = 50
          elif fio2 >= 7:
              fio2_std = 45
          elif fio2 >= 6:
              fio2_std = 40
          elif fio2 >= 5:
              fio2_std = 35
          elif fio2 >= 4:
            fio2_std = 30
          elif fio2 >= 3:
            fio2_std = 27
          elif fio2 >= 2:
            fio2_std = 25
          else:
            fio2_std = 21
      # ensure that one var is float else get integer division in python 2.x
      if fio2_std != None and spo2 != None:
        sf_ratio = round(float(spo2) / fio2_std * 100)
      else:
        sf_ratio = None
      # SOFA respiratory
      sofa_r = 0
      if pf_ratio is not None:
        if pf_ratio < 100 and rxfio2 in list('cnp'):
          sofa_r = 4
        elif pf_ratio < 200 and rxfio2 in list('cnp'):
          sofa_r = 3
        elif pf_ratio < 300:
          sofa_r = 2
        elif pf_ratio < 400:
          sofa_r = 1
      elif sf_ratio is not None:
        if sf_ratio < 115 and rxfio2 in list('cnp'):
          sofa_r = 4
        elif sf_ratio < 240 and rxfio2 in list('cnp'):
          sofa_r = 3
        elif sf_ratio < 370:
          sofa_r = 2
        elif sf_ratio < 440:
          sofa_r =1
      derived_var = sofa_r
-
  fname: sofa_p
  sqltype: tinyint
  varlab: SOFA coagulation
  derived: True
  derived_missing_ok: True
  primaryfields: [platelets]
  code:
    python: |
      # SOFA Coagulation
      sofa_p = 0
      if platelets is not None:
        if platelets < 20:
          sofa_p = 4
        elif platelets < 50:
          sofa_p = 3
        elif platelets < 100:
          sofa_p = 2
        elif platelets < 150:
          sofa_p = 1
      derived_var = sofa_p
  notes: |
    - currently does not check for platelet transfusions
-
  fname: sofa_h
  sqltype: tinyint
  varlab: SOFA hepatic
  derived: True
  derived_missing_ok: True
  primaryfields: [bili]
  code:
    python: |
      # SOFA Liver
      sofa_h = 0
      if bili >= 204:
        sofa_h = 4
      elif bili >= 102:
        sofa_h = 3
      elif bili >= 33:
        sofa_h = 2
      elif bili >= 20:
        sofa_h =1
      derived_var = sofa_h
-
  fname: sofa_c
  sqltype: tinyint
  varlab: SOFA cardiovascular
  derived: True
  derived_missing_ok: True
  primaryfields: [bpsys, bpdia, rxcvs_sofa, rxcvs_drug, rxcvs_dose]
  code:
    python: |
      # CHANGED: 2013-02-26 - since rxcvs_sofa is now an integer code
      rxcvs_sofa_dict = {0: 'a', 1:'b', 2:'c', 3:'d', 4:'e', 5:'g'}
      if rxcvs_sofa in rxcvs_sofa_dict:
        rxcvs_sofa = rxcvs_sofa_dict[rxcvs_sofa]
      else:
        rxcvs_sofa = ''
      if bpsys != None and bpdia != None:
        bpmap = round(bpdia + ((bpsys - bpdia)/3))
      else:
        bpmap = None
      # SOFA cardiovascular
      sofa_c = 0
      # if (SPOT)light and working with rxcvs_sofa
      if (bpmap or bpsys) and rxcvs_sofa != None and rxcvs_sofa not in list('cdeg'):
       if bpmap and bpmap < 70:
         sofa_c = 1
       elif bpsys and bpsys < 90:
          sofa_c = 1
      elif rxcvs_sofa in list('cdeg'):
        sofa_c = 2
      # if (SPOT)id and working with rxcvs_sofa
      if (bpmap or bpsys) and rxcvs_sofa == None and rxcvs_dose != None:
       if bpmap and bpmap < 70:
         sofa_c = 1
       elif bpsys and bpsys < 90:
          sofa_c = 1
      elif rxcvs_drug in list('na') and rxcvs_dose <= 0.1:
        sofa_c = 3
      elif rxcvs_drug in list('na') and rxcvs_dose > 0.1:
        sofa_c = 4
      elif rxcvs_drug in list('v'):
        sofa_c = 4
      derived_var = sofa_c
  notes: |
    - CHANGED: 2012-12-13 - to work flexibly with (SPOT)light and (SPOT)id data: you will need to update table definitions for (SPOT)light with dummy vars for
-
  fname: sofa_n
  sqltype: tinyint
  varlab: SOFA neurological
  derived: True
  derived_missing_ok: True
  primaryfields: [gcst, avpu]
  code:
    python: |
      # SOFA neuro
      sofa_n = 0
      if gcst:
        if gcst <= 6:
          sofa_n = 4
        elif gcst <= 9:
          sofa_n = 3
        elif gcst <= 12:
          sofa_n = 2
        elif gcst <= 14:
          sofa_n = 1
      elif avpu in list('avpuc'):
        if avpu == 'u':
          sofa_n = 4
        elif avpu == 'p':
          sofa_n = 3
        elif avpu == 'v' or avpu == 'c':
          sofa_n = 1
      derived_var = sofa_n
-
  fname: sofa_k
  sqltype: tinyint
  varlab: SOFA renal
  derived: True
  derived_missing_ok: True
  primaryfields: [urine_period, v_timestamp, urine_vol, creatinine, urine1, urine24]
  code:
    python: |
      # urine volume per hour - (SPOT)light code
      if urine_period is not None and v_timestamp is not None and urine_vol is not None:
        if urine_period in [1, 2, 3]:
            uvol24 = urine_vol / {1:1, 2:6, 3:12}[urine_period] * 24
        elif urine_period == 4 and v_timestamp.hour != 0:
            uvol24 = urine_vol / v_timestamp.hour * 24
      else:
          uvol24 = None
      # (SPOT)id - prioritise 24hr volumes
      if urine24 != None:
        uvol24 = urine24
      elif urine1 != None:
        uvol24 = 24 * urine1
      else:
        uvol24 = None
      # SOFA renal
      sofa_k = 0
      if creatinine > 440 or uvol24 < 200 and uvol24 is not None:
        sofa_k = 4
      elif creatinine > 300 or uvol24 < 500 and uvol24 is not None:
        sofa_k = 3
      elif creatinine > 170:
        sofa_k = 2
      elif creatinine > 109:
        sofa_k = 1
      derived_var = sofa_k
-
  fname: sepsis2001
  sqltype: tinyint
  varlab: Sepsis as per 2001 defn
  derived: True
  derived_missing_ok: True
  notes: |
    CHANGED: 2012-11-21 - to split shock categories into hypotension and hypoperfusion
  vallab:
    0: No
    1: SIRS
    2: Sepsis
    3: Severe sepsis
    4: Septic shock - hypotension alone
    5: Septic shock - hypoperfusion alone
    6: Septic shock - hypotension and hypoperfusion
  primaryfields:
    - temperature
    - hrate
    - rrate
    - wcc
    - sepsis
    - fio2
    - fio2u
    - abgfio2
    - rxfio2
    - pao2
    - v_timestamp
    - urine_vol
    - urine_period
    - creatinine
    - platelets
    - bili
    - lactate
    - spo2
    - bpsys
    - bpdia
    - rxcvs_sofa
  code:
    python: |
      # CHANGED: 2013-02-08 - since rxfio2 is now an integer code
      rxfio2_dict = {0:'r', 1:'w', 2:'v', 3:'b', 4:'c', 5:'n', 6:'p', 7:'o'}
      if rxfio2 in rxfio2_dict:
        rxfio2 = rxfio2_dict[rxfio2]
      else:
        rxfio2 = ''
      # CHANGED: 2013-02-26 - since rxcvs_sofa is now an integer code
      rxcvs_sofa_dict = {0: 'a', 1:'b', 2:'c', 3:'d', 4:'e', 5:'g'}
      if rxcvs_sofa in rxcvs_sofa_dict:
        rxcvs_sofa = rxcvs_sofa_dict[rxcvs_sofa]
      else:
        rxcvs_sofa = ''
      sirs = 0
      if temperature > 38.3:
        sirs = sirs + 1
      if temperature < 36 and temperature is not None:
        sirs = sirs + 1
      if hrate > 90:
        sirs = sirs + 1
      if rrate > 20:
        sirs = sirs + 1
      if wcc > 12:
        sirs = sirs + 1
      if wcc < 4 and wcc is not None:
        sirs = sirs + 1
      if sirs >= 2:
        sirs = True
      else:
        sirs = False
      # PF ratio
      if (pao2 is not None) and (abgfio2 is not None):
          # ensure that one var is float else get integer division in python 2.x
          pf_ratio = round(float(pao2) * 7.6 / abgfio2 * 100)
      else:
          pf_ratio = None
      organ_dysfunction = False
      hypotension = False
      hypoperfusion= False
      # FiO2 standardised
      fio2_std = None
      if rxfio2 == 'r':
          fio2_std = 21
      elif rxfio2 == 'v':
          fio2_std = fio2
      elif rxfio2 in list('cnpo') and fio2u == 'p':
          fio2_std = fio2
      # Now treat CPAP, NIV, IPPV like reservoir bag
      elif rxfio2 in list('cbnp') and fio2u == 'l':
          if fio2 >= 10:
              fio2_std = 90
          elif fio2 >= 9:
              fio2_std = 85
          elif fio2 >= 8:
              fio2_std = 80
          elif fio2 >= 7:
              fio2_std = 70
          elif fio2 >= 6:
              fio2_std = 60
          else:
              fio2_std = 50
      elif rxfio2 == 'w':
          if fio2 >= 8:
              fio2_std = 50
          elif fio2 >= 7:
              fio2_std = 45
          elif fio2 >= 6:
              fio2_std = 40
          elif fio2 >= 5:
              fio2_std = 35
          elif fio2 >= 4:
            fio2_std = 30
          elif fio2 >= 3:
            fio2_std = 27
          elif fio2 >= 2:
            fio2_std = 25
          else:
            fio2_std = 21
      # ensure that one var is float else get integer division in python 2.x
      if fio2_std != None and spo2 != None:
        sf_ratio = round(float(spo2) / fio2_std * 100)
      else:
        sf_ratio = None
      if pf_ratio < 300 and pf_ratio is not None:
        organ_dysfunction = True
      elif sf_ratio < 370 and sf_ratio is not None:
        organ_dysfunction = True
      # urine volumer per hour
      if urine_period is not None and v_timestamp is not None and urine_vol is not None:
        if urine_period in [1, 2, 3]:
            uvol24 = urine_vol / {1:1, 2:6, 3:12}[urine_period] * 24
        elif urine_period == 4 and v_timestamp.hour != 0:
            uvol24 = urine_vol / v_timestamp.hour * 24
      else:
          uvol24 = None
      if uvol24 < 840 and uvol24 is not None:
        organ_dysfunction = True
      # using SOFA threshold here since don't have baseline
      if creatinine > 170:
        organ_dysfunction = True
      if platelets < 100 and platelets is not None:
        organ_dysfunction = True
      if bili > 70:
        organ_dysfunction = True
      # MAP
      if bpsys != None and bpdia != None:
        bpmap = round(bpdia + ((bpsys - bpdia)/3))
      else:
        bpmap = None
      # CHANGED: 2012-12-21 - now include fluid resus in definition
      if bpmap and bpmap < 70:
        organ_dysfunction = True
      elif bpsys and bpsys < 90:
        organ_dysfunction = True
      if bpmap and bpmap < 70 and rxcvs_sofa in list('bcdeg'):
        hypotension = True
      elif bpsys and bpsys < 90 and rxcvs_sofa in list('bcdeg'):
        hypotension = True
      # CHANGED: 2012-12-21 - lactate changed from 1.0 t 2.5
      if lactate > 2.5:
        organ_dysfunction = True
        hypoperfusion = True
      derived_var = 0
      if sirs:
        derived_var = 1
      if sirs and sepsis >= 3:
        derived_var = 2
      if sirs and sepsis >= 3 and organ_dysfunction:
        derived_var = 3
      if sirs and sepsis >= 3 and hypotension and not hypoperfusion:
        derived_var = 4
      if sirs and sepsis >= 3 and not hypotension and hypoperfusion:
        derived_var = 5
      if sirs and sepsis >= 3 and hypotension and hypoperfusion:
        derived_var = 6
  notes: |
    Septic shock definition: 2001 consensus statement uses blood pressure alone but quotes Lactate > 1 for 'sepsis' [@Levy:2003cia]
    aPC paper uses Lactate > 1.5 x upper limit of normal for local lab when BE < -5 [@Bernard:NEnglJMed:2001]
    PROWESS shock definition - Lactate > 2.5 [@Ranieri:2012kn]
    - all definitions should be considered in the context of adequate fluid resuscitation
    ICNARC definition uses BE < -5 alone (2007)
-
  fname: icu_delay
  sqltype: tinyint
  varlab: Delayed admission to ICU
  tablerowlabel:
    latex: Delayed admission to critical care
  source: CMPD
  talias: {tailsfinal: tnessa}
  valias: {T: 0, D: 1}
  vallab: *label_truefalse
-
  fname: icu_delay_hours
  sqltype: smallint
  varlab: Delay prior to ICU admission
  source: CMPD
  talias: {tailsfinal: dhrs}
-
  fname: cmp_beds_min
  sqltype: tinyint
  varlab: Minimum number of CMP beds reported
-
  fname: cmp_patients
  sqltype: smallint
  varlab: Unique CMP patients during study
-
  fname: cmp_patients_permonth
  sqltype: smallint
  varlab: Unique CMP patients during study per month
-
  fname: cmp_beds_max
  sqltype: tinyint
  varlab: Maximum number of CMP beds reported
  tablerowlabel:
    latex: "Critical care beds"
-
  fname: cmp_beds_persite
  sqltype: tinyint
  varlab: CMP beds reported per site
  talias: {tailsmini: totbeds}
  source: CMPD
  notes: |
    NOTE: There may be a discrepancy between the CMP declared and the number reported
    NOTE: 2012-10-09 - not set up as derived variable but code snippet copied here for future use
  code:
    SQL: |
      UPDATE phd_sites AS p LEFT JOIN
        (SELECT
            hospital,
            teachingstatus,
            IF(count(unit) > count(DISTINCT unit),
              sum(beds) / count(unit),
              sum(beds) ) AS beds,
            `hospital postcode`
          FROM sites_via_directory GROUP BY hospital) AS d
          ON p.dorisname = d.hospital
        SET p.cmp_beds_persite = d.beds;
      SELECT dorisname, icode, cmp_beds_persite FROM phd_sites ORDER BY cmp_beds_persite;
-
  fname: cmp_icubeds_persite
  sqltype: tinyint
  varlab: CMP ICU beds per site
  talias: {tailsmini: icubeds}
  notes: There may be a discrepancy between the CMP declared and the number reported
-
  fname: site_quality_by_month
  sqltype: float
  varllab: Tails matched at site
  units: percent
-
  fname: site_quality_q1
  sqltype: float
  varlab: Tails matched Q1
  units: percent
-
  fname: ddicu
  sqltype: date
  varlab: date of ICU discharge
  source: CMPD
-
  fname: tdicu
  sqltype: time
  varlab: time of ICU discharge
  source: CMPD
-
  fname: dod
  sqltype: date
  varlab: date of ICU death
  source: CMPD
-
  fname: tod
  sqltype: time
  varlab: time of ICU death
  source: CMPD
-
  fname: dead_icu
  sqltype: tinyint
  varlab: ICU death
  tablerowlabel:
    latex: Critical care mortality
  source: CMPD
  talias: {tailsfinal: dis, tailsmini: dis}
  valias: {A: 0, D: 1}
  vallab: *label_deadalive
  checks:
  -
    type: legal_vals
    value: [0,1]
    msg: Illegal response
    response: drop_record
-
  fname: dead28
  sqltype: tinyint
  tablerowlabel:
    latex: "28 day mortality"
  vallab: *label_deadalive
-
  fname: dead90
  sqltype: tinyint
  tablerowlabel:
    latex: "90 day mortality"
  vallab: *label_deadalive
-
  fname: icu_admit
  sqltype: timestamp
  varlab: Date-time ICU admission
  derived: True
  derived_missing_ok: False
  primaryfields: [daicu, taicu]
  code:
    python: |
      # longwinded but quickest way to go fr date to datetime type
      derived_var = datetime.datetime.combine(daicu, datetime.time()) + taicu

-
  fname: icu_discharge
  sqltype: timestamp
  varlab: Date-time ICU discharge
  derived: True
  derived_missing_ok: True
  primaryfields: [ddicu, tdicu, dod, tod, dead_icu]
  code:
    python: |
      if ddicu is not None and tdicu is not None and dead_icu == 0:
        icu_discharge = datetime.datetime.combine(ddicu, datetime.time()) + tdicu
      elif dod is not None and tod is not None and dead_icu == 1:
        icu_discharge = datetime.datetime.combine(dod, datetime.time()) + tod
      else:
        icu_discharge = None
      derived_var = icu_discharge
-
  fname: all_cc_in_cmp
  sqltype: tinyint
  varlab: Crit care beds all in CMP
  notes: Based on report from site survey
-
  fname: ht_ratio
  sqltype: decimal
  sqllen: '8,4' # NOTE: 2012-10-01 - use of decimal field
  varlab: Ratio of reported unique heads to tails
-
  fname: sha
  sqltype: char
  sqllen: 128
  source: HES
  varlab: Strategic Health Authority
-
  fname: hes_code
  sqltype: char
  sqllen: 8
  source: HES
  varlab: HES provider code
-
  fname: hes_name
  sqltype: char
  sqllen: 128
  source: HES
  varlab: HES provider name
-
  fname: hes_fce
  sqltype: int
  source: HES
  varlab: HES finished consultant episodes
-
  fname: hes_admissions
  sqltype: int
  source: HES
  varlab: HES admissions (annual)
-
  fname: hes_emergencies
  sqltype: int
  source: HES
  varlab: HES emergency admissions (annual)
-
  fname: hes_daycase
  sqltype: int
  source: HES
  varlab: HES daycase count
-
  fname: hes_los_mean
  sqltype: float
  source: HES
  varlab: HES mean LOS
-
  fname: hes_los_median
  sqltype: float
  source: HES
  varlab: HES median LOS
-
  fname: hes_beddays
  sqltype: int
  source: HES
  varlab: HES FCE bed days
  notes: FCE are Finished Consultant Episodes
-
  fname: hes_genmed
  sqltype: int
  source: HES
  varlab: HES Average available general medical beds
  notes: |
    - chosen as a more consistent estimator of ward patients than total beds?
-
  fname: sites_per_trust
  sqltype: tinyint
  varlab: HES sites per trust
-
  fname: site_postcode
  sqltype: char
  sqllen: 8
  talias: {sitesfinal: site_pcode}
  varlab: Hospital postcode
-
  fname: site_teaching
  sqltype: char
  sqllen: 32
  varlab: Teaching status
-
  fname: teaching_hosp
  sqltype: tinyint
  varlab: Teaching hospital
-
  fname: icutype
  sqltype: char
  sqllen: 12
  source: CMPD
  varlab: CMPD ICU type
-
  fname: hosptype
  sqltype: char
  sqllen: 32
  source: CMPD
  varlab: CMPD hospital type
-
  fname: v_ccot_cmpd
  sqltype: char
  sqllen: 1
  source: CMPD
  varlab: CCOT pre-CMPD admission
  talias: {tailsmini: cca}
-
  fname: v_ccot_cmpd_date
  sqltype: date
  source: CMPD
  varlab: CCOT pre-CMPD admission - date
  talias: {tailsmini: dlcca}
  notes: Date of last critical care visit prior to this admission
-
  fname: ims_c1
  sqltype: tinyint
  tablerowlabel:
    latex: "Pre-admission ICNARC physiology score"
  stataformat: "%9.1fc"
  varlab: Pre-admission ICNARC physiology score
  source: CMPD
-
  fname: imscore
  talias: {working: ims_c2}
  sqltype: tinyint
  tablerowlabel:
    latex: "1\\textsuperscript{st} 24 hr ICNARC physiology score"
  stataformat: "%9.1fc"
  varlab: CMP ICNARC physiology score
  source: CMPD
-
  fname: ims_ms1
  sqltype: tinyint
  tablerowlabel:
    latex: "Pre-admission ICNARC physiology score (partial)"
  stataformat: "%9.1fc"
  varlab: Pre-admission ICNARC physiology score (partial)
-
  fname: ims_ms2
  sqltype: tinyint
  tablerowlabel:
    latex: "1\\textsuperscript{st} 24 hr ICNARC physiology score (partial)"
  stataformat: "%9.1fc"
  varlab: CMP ICNARC physiology score (partial)
  source: CMPD
-
  fname: IM3prob
  sqltype: float
  varlab: CMP ICNARC Pr(mortality) 2011
  source: CMPD
-
  fname: raicu1
  sqltype: char
  sqllen: 24
  source: CMPD
  varlab: CMP admission diagnosis - 1
-
  fname: lhr
  sqltype: smallint
  varlab: Lowest heart rate
  source: CMPD
-
  fname: hhr
  sqltype: smallint
  varlab: Highest heart rate
  source: CMPD
-
  fname: lsys
  sqltype: smallint
  varlab: Lowest systolic BP
  source: CMPD
-
  fname: hsys
  sqltype: smallint
  varlab: Highest systolic BP
  source: CMPD
-
  fname: lctemp
  sqltype: float
  varlab: Lowest central temperature
  source: CMPD
-
  fname: hctemp
  sqltype: float
  varlab: Highest central temperature
  source: CMPD
-
  fname: lnctemp
  sqltype: float
  varlab: Lowest non-central temperature
  source: CMPD
-
  fname: hnctemp
  sqltype: float
  varlab: Highest non-central temperature
  source: CMPD
-
  fname: lvrr
  sqltype: smallint
  varlab: Lowest ventilated respiratory rate
  source: CMPD
-
  fname: hvrr
  sqltype: smallint
  varlab: Highest ventilated respiratory rate
  source: CMPD
-
  fname: lnvrr
  sqltype: smallint
  varlab: Lowest non-ventilated respiratory rate
  source: CMPD
-
  fname: hnvrr
  sqltype: smallint
  varlab: Highest non-ventilated respiratory rate
  source: CMPD
-
  fname: ilpo
  sqltype: float
  varlab: Lowest PaO2
  source: CMPD
-
  fname: intilpo
  sqltype: tinyint
  varlab: Associated intubation status
  source: CMPD
  vallab: *label_truefalse
-
  fname: filpo
  sqltype: float
  varlab: Associated FiO2
  source: CMPD
-
  fname: philpo
  sqltype: float
  varlab: Associated pH
  source: CMPD
-
  fname: lph_v3
  sqltype: float
  varlab: Lowest pH
  source: CMPD
-
  fname: hu
  sqltype: float
  varlab: highest urea
  source: CMPD
-
  fname: hcreat
  sqltype: smallint
  varlab: highest creatinine
  source: CMPD
-
  fname: lcreat
  sqltype: smallint
  varlab: lowest creatinine
  source: CMPD
-
  fname: hna
  sqltype: smallint
  varlab: Highest serum sodium
  source: CMPD
-
  fname: lna
  sqltype: smallint
  varlab: Lowest serum sodium
  source: CMPD
-
  fname: up
  sqltype: smallint
  varlab: Urine output
  source: CMPD
-
  fname: lwbc
  sqltype: float
  varlab: Lowest white blood cell count
  source: CMPD
-
  fname: hwbc
  sqltype: float
  varlab: Highest white blood cell count
  source: CMPD
-
  fname: ltot
  sqltype: tinyint
  varlab: Lowest total GCS
  source: CMPD
-
  fname: ap2aps
  sqltype: tinyint
  varlab: APACHE II APS
  source: CMPD
-
  fname: ap2score
  sqltype: tinyint
  varlab: APACHE II score
  source: CMPD
-
  fname: ap2probuk
  sqltype: float
  varlab: APACHE II Pr(mort) UK
  source: CMPD
-
  fname: hbl
  sqltype: float
  varlab: Highest lactate
  source: CMPD
-
  fname: lpc
  sqltype: smallint
  varlab: Lowest platelets
  source: CMPD
-
  fname: age_spotid
  sqltype: tinyint
  varlab: Age (years)
  derived: True
  derived_missing_ok: False
  primaryfields: [cxr_dt, dob]
  code:
    python: |
      derived_var = (cxr_dt - dob).days/365.25
-
  fname: charlson_score
  sqltype: tinyint
  varlab: Charlson Score
  derived: True
  derived_missing_ok: True
  primaryfields:
    - pmhmi
    - pmhhf
    - pmhpvd
    - pmhcvd
    - pmhhemi
    - pmhaids
    - pmhmld
    - pmhsld
    - pmhckd
    - pmhctd
    - pmhud
    - pmhdem
    - pmhdm
    - pmhdmend
    - pmhtumour
    - pmhmets
    - pmhlymph
    - pmhleuk
    - pmhcopd
  code:
    python: |
      result = 0
      if pmhmi in list('pi'):
        result += 1
      if pmhhf in list('pi'):
        result += 1
      if pmhpvd in list('pi'):
        result += 1
      if pmhcvd in list('pi'):
        result += 1
      if pmhdem in list('pi'):
        result += 1
      if pmhcopd in list('pi'):
        result += 1
      if pmhcopd in list('pi'):
        result += 1
      if pmhctd in list('pi'):
        result += 1
      if pmhud in list('pi'):
        result += 1
      if pmhmld in list('pi'):
        result += 1
      if pmhdm in list('pi'):
        result += 1
      if pmhhemi in list('pi'):
        result += 2
      if pmhckd in list('pi'):
        result += 2
      if pmhdmend in list('pi'):
        result += 2
      if pmhtumour in list('pi'):
        result += 2
      if pmhleuk in list('pi'):
        result += 2
      if pmhlymph in list('pi'):
        result += 2
      if pmhsld in list('pi'):
        result += 3
      if pmhmets in list('pi'):
        result += 6
      if pmhaids in list('pi'):
        result += 6
      derived_var = result
-
  fname: source_cmp
  sqltype: tinyint
  varlab: Record sourced from CMP
  vallab: *label_truefalse
  notes: |
    - use to identify CMP data that has been imported externally
    - i.e. UCLH, Broomfield
-
  fname: dbricu
  sqltype: date
  varlab: Date body removed from your unit
  source: CMPD
-
  fname: tbricu
  sqltype: time
  varlab: time body removed from your unit
  source: CMPD
-
  fname: dtw
  sqltype: date
  varlab: Date when treatment first withdrawn
  source: CMPD
-
  fname: ttw
  sqltype: time
  varlab: Time when treatment first withdrawn
  source: CMPD
-
  fname: dwfrd
  sqltype: date
  varlab: Date when fully ready for discharge
  source: CMPD
-
  fname: twfrd
  sqltype: time
  varlab: time when fully ready for discharge
  source: CMPD
-
  fname: rdis_v3
  sqltype: char
  sqllen: 1
  varlab: Reason for discharge from ICU
  vallab:
    N: ending critical care
    C: comparable critical care
    R: repatriation
    M: more specialist care
    P: palliative care
    S: self-discharge
  source: CMPD
-
  fname: tnessd
  sqltype: char
  sqllen: 1
  varlab: Timeliness of discharge from your unit
  vallab:
    F: fully ready
    D: delayed
    E: early
  source: CMPD
-
  fname: unit_ae
  sqltype: tinyint
  varlab: "Emergemcy department on site"
  vallab: *label_truefalse
  source: (SPOT)light survey
-
  fname: unit_mau
  sqltype: tinyint
  varlab: "Medical Admissions Unit on site"
  vallab: *label_truefalse
  source: (SPOT)light survey
-
  fname: studymonth_protocol_problem
  sqltype: tinyint
  varlab: Protocol problem during this month
  vallab: *label_truefalse
-
  fname: studymonth_allreferrals
  sqltype: tinyint
  varlab: All referrals protocol this month
  vallab: *label_truefalse
-
  fname: cmp_admx_permonth
  sqltype: smallint
  varlab: Monthly CMP admission average
-
  fname: cmp_throughput
  sqltype: float
  varlab: CMP admissions per bed per month
-
  fname: occupancy
  sqltype: float
  varlab: Number of physically occupied beds
  source: stata_derived
-
  fname: occupancy_active
  sqltype: float
  varlab: Number of actively treated patients
  source: stata_derived
-
  fname: free_beds_cmp
  sqltype: float
  varlab: Number of physically empty beds (as per CMP numbers)
  source: stata_derived
-
  fname: free_beds_cmp_pct
  sqltype: float
  units: percent
  varlab: percentage free beds
  source: stata_derived
-
  fname: count_patients
  sqltype: smallint
  varlab: Monthly visits - per unit or site
  notes: |
    - from lite_summ_monthly
    - represents number of visits per site or per unit depending on context
-
  fname: count_all_eligible
  sqltype: smallint
  varlab: Monthly ward admissions - per unit or site
  notes: |
    - from lite_summ_monthly
    - represents number of ward admissions per site or per unit depending on context
-
  fname: periarrest
  sqltype: tinyint
  tablerowlabel:
    latex: "Reported to be peri-arrest"
  vallab: *label_truefalse
  source: stata_derived
-
  fname: v_decision
  sqltype: tinyint
  tablerowlabel:
    latex: Visit decision
  vallab:
    0: No ward review planned
    1: Ward review planned
    2: Accepted to critical care (Level 2)
    3: Accepted to critical care (Level 3)
  source: stata_derived
-
  fname: hes_overnight
  sqltype: float
  tablerowlabel:
    latex: "Hospital admissions"
  unitlabel:
    latex: "thousands"
  vallab:
    0: "0--30"
    1: "30--60"
    2: "60--90"
    3: ">90"
  stataformat: "%9.1fc"
  source: stata_derived
  notes: |
    - only counts overnight admissions
-
  fname: hes_emergx
  sqltype: float
  tablerowlabel:
    latex: "Hospital emergency casemix"
  unitlabel:
    latex: "\\%"
  vallab:
    0: "0--29\\%"
    1: "30--39\\%"
    2: "40--100\\%"
  stataformat: "%9.1fc"
  source: stata_derived
-
  fname: referrals_permonth
  sqltype: float
  tablerowlabel:
    latex: "Ward referrals per month to critical care"
  unitlabel:
    latex: "referrals per month"
  source: stata_derived
-
  fname: out_of_hours
  sqltype: tinyint
  tablerowlabel:
    latex: "Out-of-hours (7pm--7am)"
  source: stata_derived
-
  fname: weekend
  sqltype: tinyint
  tablerowlabel:
    latex: "Weekend (Saturday--Sunday)"
  source: stata_derived
-
  fname: icnarc0
  sqltype: tinyint
  tablerowlabel:
    latex: "ICNARC physiology score"
  stataformat: "%9.1fc"
  notes: |
    - zero's defined because missing > 10 fields dropped
  source: stata_derived
-
  fname: beds_none
  sqltype: tinyint
  tablerowlabel:
    latex: "No critical care beds available"
  source: stata_derived
-
  fname: delayed_referral
  sqltype: tinyint
  tablerowlabel:
    latex: "Delayed referral to critical care"
  vallab: *label_truefalse
  source: stata_derived
-
  fname: patients_perhesadmx
  sqltype: float
  tablerowlabel:
    latex: "Ward referrals to ICU"
  unitlabel:
    latex:  "per 1,000 hospital admissions"
  vallab:
    1: "0--5"
    2: "5--15"
    3: "15--"
  source: stata_derived
-
  fname: sepsis_b
  sqltype: tinyint
  tablerowlabel:
    latex: "Clinical sepsis"
  source: stata_derived
-
  fname: ccmds_delta
  sqltype: tinyint
  vallab:
    1: Downgrade
    2: No change
    3: Upgrade
  tablerowlabel:
    latex: "Visit recommendation (level of care)"
  source: stata_derived
-
  fname: ccot_hrs_perweek
  sqltype: smallint
  tablerowlabel:
    latex: "CCOT weekly hours"
  source: stata_derived
-
  fname: time2icu
  sqltype: float
  tablerowlabel:
    latex: "Time to critical care"
  unitlabel:
    latex: "hrs"
  stataformat: "%9.1fc"
  source: stata_derived
-
  fname: early4
  sqltype: tinyint
  tablerowlabel:
    latex: "Level 2 or 3 - delivered within 4 hrs"
  source: stata_derived
-
  fname: icu_recommend
  sqltype: tinyint
  talias:
    propensity_balance: cc_recommend
  tablerowlabel:
    latex: "Level 2 or 3 - recommended"
  source: stata_derived
-
  fname: icu_accept
  sqltype: tinyint
  tablerowlabel:
    latex: "Level 2 or 3 - accepted"
  source: stata_derived
-
  fname: admx_elsurg_low
  sqltype: tinyint
  tablerowlabel:
    latex: "High emergency case mix"
  source: stata_derived
  notes: ">90\\% emergency admissions with respect to CMP case mix"
-
  fname: admx_low
  sqltype: tinyint
  tablerowlabel:
    latex: "Low critical care admission rate"
  source: stata_derived
  notes: at unit level (<50 CMP admissions/month)
-
  fname: admx_p50
  sqltype: float
  tablerowlabel:
    latex: "Critical care admissions"
  unitlabel:
    latex: "Median per month"
  source: stata_derived
  notes: at unit level
-
  fname: admx_elsurg
  sqltype: float
  tablerowlabel:
    latex: "Elective surgical case mix"
  source: stata_derived
  notes: at unit level
-
  fname: decjanfeb
  sqltype: tinyint
  tablerowlabel:
    latex: "Winter (Dec--Feb)"
  source: stata_derived
-
  fname: satsunmon
  sqltype: tinyint
  tablerowlabel:
    latex: "Weekend (Sat/Sun/Mon)"
  source: stata_derived
-
  fname: small_unit
  sqltype: tinyint
  tablerowlabel:
    latex: "Critical Care with <10 beds"
  source: stata_derived
-
  fname: tofd
  sqltype: tinyint
  tablerowlabel:
    latex: "Shift time"
  vallab:
    0: Reference
    1: Early shift (0500-0959)
    2: Late shift (1500-1959)
  source: stata_derived
-
  fname: hour
  sqltype: tinyint
  tablerowlabel:
    latex: "Time"
  vallab:
    0: "0000--0359"
    4: "0400--0759"
    8: "0800--1159"
    12: "1200--1559"
    16: "1600--1959"
    20: "2000--2359"
  source: stata_derived
-
  fname: imscore_p50
  sqltype: float
  tablerowlabel:
    latex: "Median ICNARC score"
  unitlabel:
    latex: "Monthly median"
  source: stata_derived
  notes: Median 1st 24hr ICNARC Acute Physiology Score for the Critical Care Unit
-
  fname: sepsis_dx
  sqltype: tinyint
  tablerowlabel:
    latex: "Reported sepsis diagnosis"
  source: stata_derived
  vallab:
    0: Not septic
    1: Unspecified sepsis
    2: GU sepsis
    3: GI sepsis
    4: Chest sepsis
-
  fname: recent_admx_count
  sqltype: tinyint
  varlab: Number of ICU admissions in 4 hours prior to visit timestamp
-
  fname: recent_admx_time
  sqltype: tinyint
  varlab: Time since last ICU admissions
  units: minutes
  notes: |
    - censored at 12 hours
    - counting back from ward visit timestamp
-
  fname: temp2
  sqltype: float
  tablerowlabel:
    latex: Temperature
  unitlabel:
    latex: "{\\textdegree}C"
  stataformat: "%9.1f"
-
  fname: wcc2
  sqltype: float
  tablerowlabel:
    latex: White cell count
  unitlabel:
    latex: "{\\texttimes}10\\textsuperscript{9}l \\textsuperscript{-1}"
  stataformat: "%9.1f"
-
  fname: hr2
  sqltype: float
  tablerowlabel:
    latex: Heart rate
  unitlabel:
    latex: "min\\textsuperscript{-1}"
  stataformat: "%9.0f"
-
  fname: bps2
  sqltype: float
  tablerowlabel:
    latex: Systolic BP
  unitlabel:
    latex: "mmHg"
  stataformat: "%9.0f"
-
  fname: ph2
  sqltype: float
  tablerowlabel:
    latex: pH
  stataformat: "%9.2f"
-
  fname: lac2
  sqltype: float
  tablerowlabel:
    latex: Lactate
  unitlabel:
    latex: "mmol l\\textsuperscript{-1}"
  stataformat: "%9.1f"
-
  fname: rr2
  sqltype: float
  tablerowlabel:
    latex: Respiratory rate
  unitlabel:
    latex: "min\\textsuperscript{-1}"
  stataformat: "%9.0f"
-
  fname: pf2
  sqltype: float
  tablerowlabel:
    latex: P:F ratio
  unitlabel:
    latex: "kPa"
  stataformat: "%9.1f"
-
  fname: na2
  sqltype: float
  tablerowlabel:
    latex: Sodium
  units: mmol / l
  unitlabel:
    latex: "mmol l\\textsuperscript{-1}"
  stataformat: "%9.0f"
-
  fname: urea2
  sqltype: float
  tablerowlabel:
    latex: Urea
  unitlabel:
    latex: "mmol l\\textsuperscript{-1}"
  stataformat: "%9.1f"
-
  fname: cr2
  sqltype: float
  tablerowlabel:
    latex: Creatinine
  unitlabel:
    latex: "\\textgreek{m}mol l\\textsuperscript{-1}"
  stataformat: "%9.0f"
-
  fname: urin2
  sqltype: float
  tablerowlabel:
    latex: Urine volume
  unitlabel:
    latex: "mls hr\\textsuperscript{-1}"
  stataformat: "%9.0fc"
-
  fname: gcs2
  sqltype: tinyint
  tablerowlabel:
    latex: Glasgow Coma Score
-
  fname: plat2
  sqltype: smallint
  tablerowlabel:
    latex: Platelets
  unitlabel:
    latex: "{\\texttimes}10\\textsuperscript{9}l \\textsuperscript{-1}"
  units: x10e9
-
  fname: temp1
  sqltype: float
  tablerowlabel:
    latex: Temperature
  unitlabel:
    latex: "{\\textdegree}C"
  stataformat: "%9.1f"
-
  fname: wcc1
  sqltype: float
  tablerowlabel:
    latex: White cell count
  unitlabel:
    latex: "{\\texttimes}10\\textsuperscript{9}l \\textsuperscript{-1}"
  stataformat: "%9.1f"
-
  fname: hr1
  sqltype: float
  tablerowlabel:
    latex: Heart rate
  unitlabel:
    latex: "min\\textsuperscript{-1}"
  stataformat: "%9.0f"
-
  fname: bps1
  sqltype: float
  tablerowlabel:
    latex: Systolic BP
  unitlabel:
    latex: "mmHg"
  stataformat: "%9.0f"
-
  fname: ph1
  sqltype: float
  tablerowlabel:
    latex: pH
  stataformat: "%9.2f"
-
  fname: lac1
  sqltype: float
  tablerowlabel:
    latex: Lactate
  unitlabel:
    latex: "mmol l\\textsuperscript{-1}"
  stataformat: "%9.1f"
-
  fname: rr1
  sqltype: float
  tablerowlabel:
    latex: Respiratory rate
  unitlabel:
    latex: "min\\textsuperscript{-1}"
  stataformat: "%9.0f"
-
  fname: pf1
  sqltype: float
  tablerowlabel:
    latex: P:F ratio
  unitlabel:
    latex: "kPa"
  stataformat: "%9.1f"
-
  fname: na1
  sqltype: float
  tablerowlabel:
    latex: Sodium
  units: mmol / l
  unitlabel:
    latex: "mmol l\\textsuperscript{-1}"
  stataformat: "%9.0f"
-
  fname: urea1
  sqltype: float
  tablerowlabel:
    latex: Urea
  unitlabel:
    latex: "mmol l\\textsuperscript{-1}"
  stataformat: "%9.1f"
-
  fname: cr1
  sqltype: float
  tablerowlabel:
    latex: Creatinine
  unitlabel:
    latex: "\\textgreek{m}mol l\\textsuperscript{-1}"
  stataformat: "%9.0f"
-
  fname: urin1
  sqltype: float
  tablerowlabel:
    latex: Urine volume
  unitlabel:
    latex: "mls hr\\textsuperscript{-1}"
  stataformat: "%9.0fc"
-
  fname: gcs1
  sqltype: tinyint
  tablerowlabel:
    latex: Glasgow Coma Score
-
  fname: plat1
  sqltype: smallint
  tablerowlabel:
    latex: Platelets
  unitlabel:
    latex: "{\\texttimes}10\\textsuperscript{9}l \\textsuperscript{-1}"
  units: x10e9
-
  fname: dx_cat
  sqltype: tinyint
  tablerowlabel:
    latex: "Reason for admission"
  vallab:
    0: Other
    1: Pneumonia - Viral
    2: Pneumonia - Bacterial
    3: Pneumonia - unknown
    4: Septic shock
    5: Acute pancreatitis
    6: Acute Renal Failure
-
  fname: firstvisit
  sqltype: tinyint
  varlab: First visit
  vallab:
    0: Review visit
    1: First visit
  definition: |
    - a first visit is defined as the first physical attendance of member(s) of the critical care outreach service (or equivalent) or member(s) of the critical care unit nursing/medical (non-outreach) staff, while on duty for the unit, for the episode of illness
    - the purpose of the visit should be to assess a patient for potential admission to critical care; the visit may be triggered by an early warning score or follow referral from a member of the nursing or medical staff (it excludes visits which are the result of arrest calls)
    - a review visit is defined as subsequent physical attendance of member(s) of the critical care outreach service (or equivalent) or member(s) of the critical care unit nursing/medical (non-outreach) staff, while on duty for the unit, for the same episode of illness
    - a visit for a new episode of illness, following visit(s) for previous episode(s) of illness, may be considered a first visit
  source: spotlight
-
  fname: icucmp
  sqltype: tinyint
  varlab: Admitted to CMP critical care
  vallab: *label_truefalse

